{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Button,Typography}from\"@material-ui/core\";import{GoogleMap,Marker,Polyline}from\"@react-google-maps/api\";import React from\"react\";import{useContext,useEffect,useState}from\"react\";import{useHistory}from\"react-router-dom\";import Rating from\"material-ui-rating\";import firebase from\"../firebase\";import{AuthContext}from\"../AuthProvider\";var db=firebase.firestore();var url=new URL(window.location.href).pathname.split(\"/\");var cid=url[2];var uid=url[3];var handleRating=function handleRating(value){alert(\"onChange \"+value);alert(cid);alert(uid);//Add CID and UID\ndb.collection(\"Challenge Rating\").add({Rating:value,ChallengeID:cid,uid:uid});};var mapContainer={left:\"0%\",height:\"65vh\",width:\"100vw\"};var getMidpoint=function getMidpoint(actualMarker,guessMarker){var lat1=actualMarker.lat;var lng1=actualMarker.lng;var lat2=guessMarker.lat;var lng2=guessMarker.lng;var lat3=(lat1+lat2)/2;var lng3=(lng1+lng2)/2;return{lat:lat3,lng:lng3};};var lineSymbol={path:\"M 0,-1 0,1\",strokeOpacity:1,scale:4};function ChallengeResult(props){var _useContext=useContext(AuthContext),currentUser=_useContext.currentUser;var history=useHistory();var midpoints=[];props.totalMarkers.forEach(function(element){return midpoints.push(getMidpoint(element.actual,element.guess));});var center=midpoints[0];for(var i=0;i<midpoints.length-1;i++){center=getMidpoint(center,midpoints[i+1]);}var handleContinue=function handleContinue(){history.replace({pathname:\"/Browse/\"});};var getPathCoordinates=function getPathCoordinates(total){var pathArray=[];total.forEach(function(markers){var path=[{lat:markers.actual.lat,lng:markers.actual.lng},{lat:markers.guess.lat,lng:markers.guess.lng}];pathArray.push(path);});return pathArray;};var pathCoordinates=getPathCoordinates(props.totalMarkers);console.log(pathCoordinates);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(GoogleMap,{mapContainerStyle:mapContainer,zoom:3,center:center,children:[props.totalMarkers.map(function(markers,i){return/*#__PURE__*/_jsx(Marker,{position:markers.guess,icon:{url:\"/Images/guess.png\",origin:new window.google.maps.Point(0,0),anchor:new window.google.maps.Point(15,15),scaledSize:new window.google.maps.Size(30,30)}},i);}),props.totalMarkers.map(function(markers,i){return/*#__PURE__*/_jsx(Marker,{position:markers.actual,icon:{url:\"/Images/flag.png\",origin:new window.google.maps.Point(0,0),anchor:new window.google.maps.Point(15,15),scaledSize:new window.google.maps.Size(30,30)}},i);}),pathCoordinates.map(function(path,i){return/*#__PURE__*/_jsx(Polyline,{path:path,geodesic:true,options:{strokeColor:\"#ff2527\",strokeOpacity:0,strokeWeight:2,icons:[{icon:lineSymbol,offset:\"0\",repeat:\"20px\"}]}},i);})]}),/*#__PURE__*/_jsxs(\"div\",{style:{align:\"center\",width:\"auto\",border:\"5px dotted black\",padding:\"20px\",marginLeft:\"auto\",marginRight:\"auto\",textAlign:\"center\"},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[\"Your total score is \",parseFloat(props.totalPoints)]}),/*#__PURE__*/_jsx(Rating,{value:5,max:5,onChange:handleRating}),/*#__PURE__*/_jsx(Button,{color:\"primary\",variant:\"contained\",onClick:handleContinue,children:\"Continue\"})]})]});}export default ChallengeResult;","map":{"version":3,"sources":["C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/src/Components/ChallengeResult.js"],"names":["Button","Typography","GoogleMap","Marker","Polyline","React","useContext","useEffect","useState","useHistory","Rating","firebase","AuthContext","db","firestore","url","URL","window","location","href","pathname","split","cid","uid","handleRating","value","alert","collection","add","ChallengeID","mapContainer","left","height","width","getMidpoint","actualMarker","guessMarker","lat1","lat","lng1","lng","lat2","lng2","lat3","lng3","lineSymbol","path","strokeOpacity","scale","ChallengeResult","props","currentUser","history","midpoints","totalMarkers","forEach","element","push","actual","guess","center","i","length","handleContinue","replace","getPathCoordinates","total","pathArray","markers","pathCoordinates","console","log","map","origin","google","maps","Point","anchor","scaledSize","Size","strokeColor","strokeWeight","icons","icon","offset","repeat","align","border","padding","marginLeft","marginRight","textAlign","parseFloat","totalPoints"],"mappings":"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","sourcesContent":["import { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\r\nimport React from \"react\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Rating from \"material-ui-rating\";\r\nimport firebase from \"../firebase\";\r\nimport { AuthContext } from \"../AuthProvider\";\r\n\r\nconst db = firebase.firestore();\r\nconst url = new URL(window.location.href).pathname.split(\"/\");\r\nconst cid = url[2];\r\nconst uid = url[3];\r\n\r\nconst handleRating = (value) => {\r\n  alert(\"onChange \" + value);\r\n\r\n  alert(cid);\r\n  alert(uid);\r\n  //Add CID and UID\r\n  db.collection(\"Challenge Rating\").add({\r\n    Rating: value,\r\n    ChallengeID: cid,\r\n    uid: uid,\r\n  });\r\n};\r\n\r\nconst mapContainer = {\r\n  left: \"0%\",\r\n  height: \"65vh\",\r\n  width: \"100vw\",\r\n};\r\n\r\nconst getMidpoint = (actualMarker, guessMarker) => {\r\n  var lat1 = actualMarker.lat;\r\n  var lng1 = actualMarker.lng;\r\n  var lat2 = guessMarker.lat;\r\n  var lng2 = guessMarker.lng;\r\n  const lat3 = (lat1 + lat2) / 2;\r\n  const lng3 = (lng1 + lng2) / 2;\r\n  return { lat: lat3, lng: lng3 };\r\n};\r\n\r\nconst lineSymbol = {\r\n  path: \"M 0,-1 0,1\",\r\n  strokeOpacity: 1,\r\n  scale: 4,\r\n};\r\n\r\nfunction ChallengeResult(props) {\r\n  const { currentUser } = useContext(AuthContext);\r\n  const history = useHistory();\r\n  const midpoints = [];\r\n  props.totalMarkers.forEach((element) =>\r\n    midpoints.push(getMidpoint(element.actual, element.guess))\r\n  );\r\n  var center = midpoints[0];\r\n  for (var i = 0; i < midpoints.length - 1; i++) {\r\n    center = getMidpoint(center, midpoints[i + 1]);\r\n  }\r\n\r\n  const handleContinue = () => {\r\n    history.replace({ pathname: `/Browse/` });\r\n  };\r\n\r\n  const getPathCoordinates = (total) => {\r\n    const pathArray = [];\r\n    total.forEach((markers) => {\r\n      const path = [\r\n        { lat: markers.actual.lat, lng: markers.actual.lng },\r\n        { lat: markers.guess.lat, lng: markers.guess.lng },\r\n      ];\r\n      pathArray.push(path);\r\n    });\r\n    return pathArray;\r\n  };\r\n  const pathCoordinates = getPathCoordinates(props.totalMarkers);\r\n\r\n  console.log(pathCoordinates);\r\n  return (\r\n    <div>\r\n      <GoogleMap mapContainerStyle={mapContainer} zoom={3} center={center}>\r\n        {props.totalMarkers.map((markers, i) => {\r\n          return (\r\n            <Marker\r\n              key={i}\r\n              position={markers.guess}\r\n              icon={{\r\n                url: `/Images/guess.png`,\r\n                origin: new window.google.maps.Point(0, 0),\r\n                anchor: new window.google.maps.Point(15, 15),\r\n                scaledSize: new window.google.maps.Size(30, 30),\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n        {props.totalMarkers.map((markers, i) => {\r\n          return (\r\n            <Marker\r\n              key={i}\r\n              position={markers.actual}\r\n              icon={{\r\n                url: `/Images/flag.png`,\r\n                origin: new window.google.maps.Point(0, 0),\r\n                anchor: new window.google.maps.Point(15, 15),\r\n                scaledSize: new window.google.maps.Size(30, 30),\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n        {pathCoordinates.map((path, i) => {\r\n          return (\r\n            <Polyline\r\n              key={i}\r\n              path={path}\r\n              geodesic={true}\r\n              options={{\r\n                strokeColor: \"#ff2527\",\r\n                strokeOpacity: 0,\r\n                strokeWeight: 2,\r\n                icons: [\r\n                  {\r\n                    icon: lineSymbol,\r\n                    offset: \"0\",\r\n                    repeat: \"20px\",\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </GoogleMap>\r\n\r\n      <div\r\n        style={{\r\n          align: \"center\",\r\n          width: \"auto\",\r\n          border: \"5px dotted black\",\r\n          padding: \"20px\",\r\n          marginLeft: \"auto\",\r\n          marginRight: \"auto\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        <Typography variant=\"h6\">\r\n          Your total score is {parseFloat(props.totalPoints)}\r\n        </Typography>\r\n        <Rating value={5} max={5} onChange={handleRating} />\r\n        <Button color=\"primary\" variant=\"contained\" onClick={handleContinue}>\r\n          Continue\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChallengeResult;\r\n"]},"metadata":{},"sourceType":"module"}