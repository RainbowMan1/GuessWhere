{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nikesh\\\\Desktop\\\\GuessWhere\\\\guesswhere\\\\src\\\\Components\\\\SubChallengeResult.js\";\nimport { Button } from \"@material-ui/core\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\nconst mapContainer = {\n  left: \"0%\",\n  height: \"65vh\",\n  width: \"100vw\"\n};\nconst center = {\n  lat: 39.693649,\n  lng: -100.548059\n};\n\nconst getDistance = (actualMarker, guessMarker) => {\n  const R = 6371e3; // metres\n\n  const φ1 = actualMarker.lat * Math.PI / 180; // φ, λ in radians\n\n  const φ2 = guessMarker.lat * Math.PI / 180;\n  const Δφ = (guessMarker.lat - actualMarker.lat) * Math.PI / 180;\n  const Δλ = (guessMarker.lng - actualMarker.lng) * Math.PI / 180;\n  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // in metres\n\n  return d;\n};\n\nfunction SubChallengeResult(props) {\n  console.log(props.Markers);\n  const pathCoordinates = [{\n    lat: props.Markers.actual.lat,\n    lng: props.Markers.actual.lng\n  }, {\n    lat: props.Markers.guess.lat,\n    lng: props.Markers.guess.lat\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainer,\n      zoom: 3,\n      center: center,\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        position: props.Markers.actual\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: props.Markers.guess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n        path: pathCoordinates,\n        geodesic: true,\n        options: {\n          strokeColor: \"#ff2527\",\n          strokeOpacity: 0.75,\n          strokeWeight: 2,\n          icons: [{\n            icon: \"lineSymbol\",\n            offset: \"0\",\n            repeat: \"20px\"\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      children: \"Continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_c = SubChallengeResult;\nexport default SubChallengeResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubChallengeResult\");","map":{"version":3,"sources":["C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/src/Components/SubChallengeResult.js"],"names":["Button","GoogleMap","Marker","Polyline","React","mapContainer","left","height","width","center","lat","lng","getDistance","actualMarker","guessMarker","R","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","d","SubChallengeResult","props","console","log","Markers","pathCoordinates","actual","guess","strokeColor","strokeOpacity","strokeWeight","icons","icon","offset","repeat"],"mappings":"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","sourcesContent":["import { Button } from \"@material-ui/core\";\r\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\r\nimport React from \"react\";\r\n\r\nconst mapContainer = {\r\n  left: \"0%\",\r\n  height: \"65vh\",\r\n  width: \"100vw\",\r\n};\r\n\r\nconst center = {\r\n  lat: 39.693649,\r\n  lng: -100.548059,\r\n};\r\n\r\nconst getDistance = (actualMarker, guessMarker) => {\r\n  const R = 6371e3; // metres\r\n  const φ1 = (actualMarker.lat * Math.PI) / 180; // φ, λ in radians\r\n  const φ2 = (guessMarker.lat * Math.PI) / 180;\r\n  const Δφ = ((guessMarker.lat - actualMarker.lat) * Math.PI) / 180;\r\n  const Δλ = ((guessMarker.lng - actualMarker.lng) * Math.PI) / 180;\r\n\r\n  const a =\r\n    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  const d = R * c; // in metres\r\n  return d;\r\n};\r\n\r\nfunction SubChallengeResult(props) {\r\n  console.log(props.Markers);\r\n  const pathCoordinates = [\r\n    { lat: props.Markers.actual.lat, lng: props.Markers.actual.lng },\r\n    { lat: props.Markers.guess.lat, lng: props.Markers.guess.lat },\r\n  ];\r\n  return (\r\n    <div>\r\n      <GoogleMap mapContainerStyle={mapContainer} zoom={3} center={center}>\r\n        <Marker position={props.Markers.actual} />\r\n        <Marker position={props.Markers.guess} />\r\n        <Polyline\r\n          path={pathCoordinates}\r\n          geodesic={true}\r\n          options={{\r\n            strokeColor: \"#ff2527\",\r\n            strokeOpacity: 0.75,\r\n            strokeWeight: 2,\r\n            icons: [\r\n              {\r\n                icon: \"lineSymbol\",\r\n                offset: \"0\",\r\n                repeat: \"20px\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </GoogleMap>\r\n      <Button color=\"primary\" variant=\"contained\">\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubChallengeResult;\r\n"]},"metadata":{},"sourceType":"module"}