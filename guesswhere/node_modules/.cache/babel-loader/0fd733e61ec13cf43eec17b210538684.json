{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nikesh\\\\Desktop\\\\GuessWhere\\\\guesswhere\\\\src\\\\Components\\\\SubChallengeResult.js\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\nimport { getDistance } from \"geolib\";\nconst mapContainer = {\n  left: \"0%\",\n  height: \"65vh\",\n  width: \"100vw\"\n};\nconst lineSymbol = {\n  path: \"M 0,-1 0,1\",\n  strokeOpacity: 1,\n  scale: 4\n};\n\nconst getPoints = distance => {\n  const points = 1000 - 0.28 * distance; //1000 * ((7926 - Math.pow(distance / 10, 1.54)) / 7926);\n\n  if (points < 0) {\n    return 0;\n  }\n\n  return points.toFixed(0);\n};\n\nconst addGeolibKeys = marker => {\n  marker.latitude = marker.lat;\n  marker.longitude = marker.lng;\n  return marker;\n};\n\nconst center = {\n  lat: 39.693649,\n  lng: -100.548059\n};\n\nfunction SubChallengeResult(props) {\n  const actual = addGeolibKeys(props.Markers.actual);\n  const guess = addGeolibKeys(props.Markers.guess);\n  const distance = getDistance(actual, guess); //const center = getMidpoint(props.Markers.actual, props.Markers.guess);\n\n  const points = getPoints(distance);\n  const pathCoordinates = [{\n    lat: props.Markers.actual.lat,\n    lng: props.Markers.actual.lng\n  }, {\n    lat: props.Markers.guess.lat,\n    lng: props.Markers.guess.lng\n  }];\n  console.log(props.Markers.actual);\n\n  const handleContinue = () => {\n    props.onContinue(Number(points));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainer,\n      zoom: 3,\n      center: center,\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        position: props.Markers.actual,\n        icon: {\n          url: `/Images/flag.png`,\n          origin: new window.google.maps.Point(0, 0),\n          anchor: new window.google.maps.Point(15, 15),\n          scaledSize: new window.google.maps.Size(30, 30)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: props.Markers.guess,\n        icon: {\n          url: `/Images/guess.png`,\n          origin: new window.google.maps.Point(0, 0),\n          anchor: new window.google.maps.Point(15, 15),\n          scaledSize: new window.google.maps.Size(30, 30)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: center\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n        path: pathCoordinates,\n        geodesic: true,\n        options: {\n          strokeColor: \"#ff2527\",\n          strokeOpacity: 0,\n          strokeWeight: 2,\n          icons: [{\n            icon: lineSymbol,\n            offset: \"0\",\n            repeat: \"20px\"\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: [\"Your Guess was \", distance, \" miles away from the actual location. You get\", \" \", points, \"/1000 points.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleContinue,\n      children: \"Continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_c = SubChallengeResult;\nexport default SubChallengeResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubChallengeResult\");","map":{"version":3,"sources":["C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/src/Components/SubChallengeResult.js"],"names":["Button","Typography","GoogleMap","Marker","Polyline","React","getDistance","mapContainer","left","height","width","lineSymbol","path","strokeOpacity","scale","getPoints","distance","points","toFixed","addGeolibKeys","marker","latitude","lat","longitude","lng","center","SubChallengeResult","props","actual","Markers","guess","pathCoordinates","console","log","handleContinue","onContinue","Number","url","origin","window","google","maps","Point","anchor","scaledSize","Size","strokeColor","strokeWeight","icons","icon","offset","repeat"],"mappings":"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","sourcesContent":["import { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\r\nimport React from \"react\";\r\nimport { getDistance } from \"geolib\";\r\n\r\nconst mapContainer = {\r\n  left: \"0%\",\r\n  height: \"65vh\",\r\n  width: \"100vw\",\r\n};\r\n\r\nconst lineSymbol = {\r\n  path: \"M 0,-1 0,1\",\r\n  strokeOpacity: 1,\r\n  scale: 4,\r\n};\r\n\r\nconst getPoints = (distance) => {\r\n  const points = 1000 - 0.28 * distance; //1000 * ((7926 - Math.pow(distance / 10, 1.54)) / 7926);\r\n  if (points < 0) {\r\n    return 0;\r\n  }\r\n  return points.toFixed(0);\r\n};\r\n\r\nconst addGeolibKeys = (marker) => {\r\n  marker.latitude = marker.lat;\r\n  marker.longitude = marker.lng;\r\n  return marker;\r\n};\r\nconst center = {\r\n  lat: 39.693649,\r\n  lng: -100.548059,\r\n};\r\nfunction SubChallengeResult(props) {\r\n  const actual = addGeolibKeys(props.Markers.actual);\r\n  const guess = addGeolibKeys(props.Markers.guess);\r\n  const distance = getDistance(actual, guess);\r\n  //const center = getMidpoint(props.Markers.actual, props.Markers.guess);\r\n  const points = getPoints(distance);\r\n  const pathCoordinates = [\r\n    { lat: props.Markers.actual.lat, lng: props.Markers.actual.lng },\r\n    { lat: props.Markers.guess.lat, lng: props.Markers.guess.lng },\r\n  ];\r\n  console.log(props.Markers.actual);\r\n  const handleContinue = () => {\r\n    props.onContinue(Number(points));\r\n  };\r\n  return (\r\n    <div>\r\n      <GoogleMap mapContainerStyle={mapContainer} zoom={3} center={center}>\r\n        <Marker\r\n          position={props.Markers.actual}\r\n          icon={{\r\n            url: `/Images/flag.png`,\r\n            origin: new window.google.maps.Point(0, 0),\r\n            anchor: new window.google.maps.Point(15, 15),\r\n            scaledSize: new window.google.maps.Size(30, 30),\r\n          }}\r\n        />\r\n        <Marker\r\n          position={props.Markers.guess}\r\n          icon={{\r\n            url: `/Images/guess.png`,\r\n            origin: new window.google.maps.Point(0, 0),\r\n            anchor: new window.google.maps.Point(15, 15),\r\n            scaledSize: new window.google.maps.Size(30, 30),\r\n          }}\r\n        />\r\n        <Marker position={center} />\r\n        <Polyline\r\n          path={pathCoordinates}\r\n          geodesic={true}\r\n          options={{\r\n            strokeColor: \"#ff2527\",\r\n            strokeOpacity: 0,\r\n            strokeWeight: 2,\r\n            icons: [\r\n              {\r\n                icon: lineSymbol,\r\n                offset: \"0\",\r\n                repeat: \"20px\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </GoogleMap>\r\n      <Typography variant=\"h6\">\r\n        Your Guess was {distance} miles away from the actual location. You get{\" \"}\r\n        {points}/1000 points.\r\n      </Typography>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={handleContinue}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubChallengeResult;\r\n"]},"metadata":{},"sourceType":"module"}