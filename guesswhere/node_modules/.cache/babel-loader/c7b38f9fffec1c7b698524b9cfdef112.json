{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Nikesh\\\\Desktop\\\\GuessWhere\\\\guesswhere\\\\src\\\\Components\\\\ChallengeResult.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Typography } from \"@material-ui/core\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nconst mapContainer = {\n  left: \"0%\",\n  height: \"65vh\",\n  width: \"100vw\"\n};\n\nconst getMidpoint = (actualMarker, guessMarker) => {\n  var lat1 = actualMarker.lat;\n  var lng1 = actualMarker.lng;\n  var lat2 = guessMarker.lat;\n  var lng2 = guessMarker.lng;\n  var dLng = (lng2 - lng1) * Math.PI / 180; //-- Convert to radians\n\n  lat1 = lat1 * Math.PI / 180;\n  lat2 = lat2 * Math.PI / 180;\n  lng1 = lng1 * Math.PI / 180;\n  var bX = Math.cos(lat2) * Math.cos(dLng);\n  var bY = Math.cos(lat2) * Math.sin(dLng);\n  var lat3 = Math.atan2(Math.sin(lat1) + Math.sin(lat2), Math.sqrt((Math.cos(lat1) + bX) * (Math.cos(lat1) + bX) + bY * bY));\n  var lng3 = lng1 + Math.atan2(bY, Math.cos(lat1) + bX);\n  lat3 = lat3 * 180 / Math.PI;\n  lng3 = lng3 * 180 / Math.PI; //-- Return result\n\n  return {\n    lat: lat3,\n    lng: lng3\n  };\n};\n\nconst center = {\n  lat: 39.693649,\n  lng: -100.548059\n};\nconst lineSymbol = {\n  path: \"M 0,-1 0,1\",\n  strokeOpacity: 1,\n  scale: 4\n};\n\nfunction ChallengeResult(props) {\n  _s();\n\n  const history = useHistory();\n  const midpoints = [];\n  props.totalMarkers.forEach(element => midpoints.push(getMidpoint(element.actual, element.guess)));\n  var center = midpoints[0];\n\n  for (var i = 0; i < midpoints.length - 1; i++) {\n    center = getMidpoint(center, midpoints[i + 1]);\n  }\n\n  const handleContinue = () => {\n    history.replace({\n      pathname: `/Browse/`\n    });\n  };\n\n  const getPathCoordinates = total => {\n    const pathArray = [];\n    total.forEach(markers => {\n      const path = [{\n        lat: markers.actual.lat,\n        lng: markers.actual.lng\n      }, {\n        lat: markers.guess.lat,\n        lng: markers.guess.lng\n      }];\n      pathArray.push(path);\n    });\n    return pathArray;\n  };\n\n  const pathCoordinates = getPathCoordinates(props.totalMarkers);\n  console.log(pathCoordinates);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainer,\n      zoom: 3,\n      center: center,\n      children: [props.totalMarkers.map((markers, i) => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: markers.guess,\n          icon: {\n            url: `/Images/flag.png`,\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15),\n            scaledSize: new window.google.maps.Size(30, 30)\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this);\n      }), props.totalMarkers.map((markers, i) => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: markers.actual,\n          icon: {\n            url: `/Images/guess.png`,\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15),\n            scaledSize: new window.google.maps.Size(30, 30)\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this);\n      }), pathCoordinates.map((path, i) => {\n        return /*#__PURE__*/_jsxDEV(Polyline, {\n          path: path,\n          geodesic: true,\n          options: {\n            strokeColor: \"#ff2527\",\n            strokeOpacity: 0,\n            strokeWeight: 2,\n            icons: [{\n              icon: lineSymbol,\n              offset: \"0\",\n              repeat: \"20px\"\n            }]\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: [\"Your total score is \", parseFloat(props.totalPoints)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleContinue,\n      children: \"Continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengeResult, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = ChallengeResult;\nexport default ChallengeResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeResult\");","map":{"version":3,"sources":["C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/src/Components/ChallengeResult.js"],"names":["Button","Typography","GoogleMap","Marker","Polyline","React","useHistory","mapContainer","left","height","width","getMidpoint","actualMarker","guessMarker","lat1","lat","lng1","lng","lat2","lng2","dLng","Math","PI","bX","cos","bY","sin","lat3","atan2","sqrt","lng3","center","lineSymbol","path","strokeOpacity","scale","ChallengeResult","props","history","midpoints","totalMarkers","forEach","element","push","actual","guess","i","length","handleContinue","replace","pathname","getPathCoordinates","total","pathArray","markers","pathCoordinates","console","log","map","url","origin","window","google","maps","Point","anchor","scaledSize","Size","strokeColor","strokeWeight","icons","icon","offset","repeat","parseFloat","totalPoints"],"mappings":"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","sourcesContent":["import { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst mapContainer = {\r\n  left: \"0%\",\r\n  height: \"65vh\",\r\n  width: \"100vw\",\r\n};\r\n\r\nconst getMidpoint = (actualMarker, guessMarker) => {\r\n  var lat1 = actualMarker.lat;\r\n  var lng1 = actualMarker.lng;\r\n  var lat2 = guessMarker.lat;\r\n  var lng2 = guessMarker.lng;\r\n\r\n  var dLng = ((lng2 - lng1) * Math.PI) / 180;\r\n\r\n  //-- Convert to radians\r\n  lat1 = (lat1 * Math.PI) / 180;\r\n  lat2 = (lat2 * Math.PI) / 180;\r\n  lng1 = (lng1 * Math.PI) / 180;\r\n\r\n  var bX = Math.cos(lat2) * Math.cos(dLng);\r\n  var bY = Math.cos(lat2) * Math.sin(dLng);\r\n  var lat3 = Math.atan2(\r\n    Math.sin(lat1) + Math.sin(lat2),\r\n    Math.sqrt((Math.cos(lat1) + bX) * (Math.cos(lat1) + bX) + bY * bY)\r\n  );\r\n  var lng3 = lng1 + Math.atan2(bY, Math.cos(lat1) + bX);\r\n  lat3 = (lat3 * 180) / Math.PI;\r\n  lng3 = (lng3 * 180) / Math.PI;\r\n  //-- Return result\r\n  return { lat: lat3, lng: lng3 };\r\n};\r\n\r\nconst center = {\r\n  lat: 39.693649,\r\n  lng: -100.548059,\r\n};\r\n\r\nconst lineSymbol = {\r\n  path: \"M 0,-1 0,1\",\r\n  strokeOpacity: 1,\r\n  scale: 4,\r\n};\r\n\r\nfunction ChallengeResult(props) {\r\n  const history = useHistory();\r\n  const midpoints = [];\r\n  props.totalMarkers.forEach((element) =>\r\n    midpoints.push(getMidpoint(element.actual, element.guess))\r\n  );\r\n  var center = midpoints[0];\r\n  for (var i = 0; i < midpoints.length - 1; i++) {\r\n    center = getMidpoint(center, midpoints[i + 1]);\r\n  }\r\n\r\n  const handleContinue = () => {\r\n    history.replace({ pathname: `/Browse/` });\r\n  };\r\n\r\n  const getPathCoordinates = (total) => {\r\n    const pathArray = [];\r\n    total.forEach((markers) => {\r\n      const path = [\r\n        { lat: markers.actual.lat, lng: markers.actual.lng },\r\n        { lat: markers.guess.lat, lng: markers.guess.lng },\r\n      ];\r\n      pathArray.push(path);\r\n    });\r\n    return pathArray;\r\n  };\r\n  const pathCoordinates = getPathCoordinates(props.totalMarkers);\r\n\r\n  console.log(pathCoordinates);\r\n  return (\r\n    <div>\r\n      <GoogleMap mapContainerStyle={mapContainer} zoom={3} center={center}>\r\n        {props.totalMarkers.map((markers, i) => {\r\n          return (\r\n            <Marker\r\n              key={i}\r\n              position={markers.guess}\r\n              icon={{\r\n                url: `/Images/flag.png`,\r\n                origin: new window.google.maps.Point(0, 0),\r\n                anchor: new window.google.maps.Point(15, 15),\r\n                scaledSize: new window.google.maps.Size(30, 30),\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n        {props.totalMarkers.map((markers, i) => {\r\n          return (\r\n            <Marker\r\n              key={i}\r\n              position={markers.actual}\r\n              icon={{\r\n                url: `/Images/guess.png`,\r\n                origin: new window.google.maps.Point(0, 0),\r\n                anchor: new window.google.maps.Point(15, 15),\r\n                scaledSize: new window.google.maps.Size(30, 30),\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n        {pathCoordinates.map((path, i) => {\r\n          return (\r\n            <Polyline\r\n              key={i}\r\n              path={path}\r\n              geodesic={true}\r\n              options={{\r\n                strokeColor: \"#ff2527\",\r\n                strokeOpacity: 0,\r\n                strokeWeight: 2,\r\n                icons: [\r\n                  {\r\n                    icon: lineSymbol,\r\n                    offset: \"0\",\r\n                    repeat: \"20px\",\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </GoogleMap>\r\n      <Typography variant=\"h6\">\r\n        Your total score is {parseFloat(props.totalPoints)}\r\n      </Typography>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={handleContinue}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChallengeResult;\r\n"]},"metadata":{},"sourceType":"module"}