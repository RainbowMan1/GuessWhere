{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useEffect,useState}from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import Card from\"@material-ui/core/Card\";import CardActionArea from\"@material-ui/core/CardActionArea\";import{useHistory}from\"react-router-dom\";import CardContent from\"@material-ui/core/CardContent\";import Button from\"@material-ui/core/Button\";import Typography from\"@material-ui/core/Typography\";import firebase from\"../firebase\";import{Rating}from\"@material-ui/lab\";import{CardMedia}from\"@material-ui/core\";var db=firebase.firestore();var avgRating=0.0;var score=0;var totalRating=0;var cnt=0;var useStyles=makeStyles({root:{maxHeight:345,maxWidth:345},media:{height:140}});export default function ChallengeCard(props){var classes=useStyles();var history=useHistory();var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),challengeCreatorName=_useState2[0],setChallengeCreatorName=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),imageUrl=_useState4[0],setImageURL=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),challengeName=_useState6[0],setChallengeName=_useState6[1];var routeToChallenge=function routeToChallenge(){//Added UID to URL path so it could be save with rating and high score\nhistory.replace({pathname:\"/Challenge/\".concat(props.challengeId,\"/\").concat(props.uid)});};useEffect(function(){var fetchname=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var userDoc;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return db.collection(\"Users\").doc(props.uid).get();case 2:userDoc=_context.sent;if(userDoc.exists){setChallengeCreatorName(userDoc.data().name);}case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchname(){return _ref.apply(this,arguments);};}();fetchname();},[]);useEffect(function(){var fetchChallenge=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var challengedata,name,subchallenge,subChallengedata;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return db.collection(\"Challenges\").doc(props.challengeId).get();case 2:challengedata=_context2.sent;name=challengedata.data().name;setChallengeName(name);subchallenge=challengedata.data().subchallenges[0];_context2.next=8;return db.collection(\"Sub-challenges\").doc(subchallenge.id).get();case 8:subChallengedata=_context2.sent;setImageURL(subChallengedata.data().images[0]);case 10:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchChallenge(){return _ref2.apply(this,arguments);};}();fetchChallenge();},[]);totalRating=0;cnt=0;//Query Firebase for hi score for each chall using props.challengID in where clause to filter\n//const data= db.collection(\"Challenge Rating\").where(\"ChallengeID\",\"==\" , props.challengeId);\n//Querty firease for all rating then divide by count to get avg rating per chall\nreturn/*#__PURE__*/_jsxs(Card,{className:classes.root,children:[/*#__PURE__*/_jsxs(CardActionArea,{onClick:routeToChallenge,children:[/*#__PURE__*/_jsx(CardMedia,{className:classes.media,image:imageUrl,title:\"Challenge\"}),/*#__PURE__*/_jsx(CardContent,{children:/*#__PURE__*/_jsx(Typography,{gutterBottom:true,variant:\"h5\",children:props.name})})]}),/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Button,{size:\"small\",variant:\"outlined\",color:\"primary\",onClick:routeToChallenge,children:\"Play\"}),/*#__PURE__*/_jsxs(Typography,{gutterBottom:true,variant:\"body1\",children:[\"Created By: \",challengeCreatorName]}),/*#__PURE__*/_jsxs(Typography,{gutterBottom:true,variant:\"body1\",children:[\"Average Rating : \",avgRating]})]}),/*#__PURE__*/_jsx(CardContent,{children:/*#__PURE__*/_jsx(Rating,{value:0,max:5})})]});}","map":{"version":3,"sources":["C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/src/Components/ChallengeCard.js"],"names":["React","useEffect","useState","makeStyles","Card","CardActionArea","useHistory","CardContent","Button","Typography","firebase","Rating","CardMedia","db","firestore","avgRating","score","totalRating","cnt","useStyles","root","maxHeight","maxWidth","media","height","ChallengeCard","props","classes","history","challengeCreatorName","setChallengeCreatorName","imageUrl","setImageURL","challengeName","setChallengeName","routeToChallenge","replace","pathname","challengeId","uid","fetchname","collection","doc","get","userDoc","exists","data","name","fetchChallenge","challengedata","subchallenge","subchallenges","id","subChallengedata","images"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport firebase from \"../firebase\";\r\nimport { Rating } from \"@material-ui/lab\";\r\nimport { CardMedia } from \"@material-ui/core\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nvar avgRating = 0.0;\r\nvar score = 0;\r\nvar totalRating = 0;\r\nvar cnt = 0;\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxHeight: 345,\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n});\r\n\r\nexport default function ChallengeCard(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [challengeCreatorName, setChallengeCreatorName] = useState(\"\");\r\n  const [imageUrl, setImageURL] = useState(\"\");\r\n  const [challengeName, setChallengeName] = useState(\"\");\r\n  const routeToChallenge = () => {\r\n    //Added UID to URL path so it could be save with rating and high score\r\n    history.replace({\r\n      pathname: `/Challenge/${props.challengeId}/${props.uid}`,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchname = async () => {\r\n      const userDoc = await db.collection(\"Users\").doc(props.uid).get();\r\n      if (userDoc.exists) {\r\n        setChallengeCreatorName(userDoc.data().name);\r\n      }\r\n    };\r\n    fetchname();\r\n  }, []);\r\n  useEffect(() => {\r\n    const fetchChallenge = async () => {\r\n      const challengedata = await db\r\n        .collection(\"Challenges\")\r\n        .doc(props.challengeId)\r\n        .get();\r\n      const name = challengedata.data().name;\r\n      setChallengeName(name);\r\n      const subchallenge = challengedata.data().subchallenges[0];\r\n      const subChallengedata = await db\r\n        .collection(\"Sub-challenges\")\r\n        .doc(subchallenge.id)\r\n        .get();\r\n      setImageURL(subChallengedata.data().images[0]);\r\n    };\r\n    fetchChallenge();\r\n  }, []);\r\n  totalRating = 0;\r\n  cnt = 0;\r\n  //Query Firebase for hi score for each chall using props.challengID in where clause to filter\r\n  //const data= db.collection(\"Challenge Rating\").where(\"ChallengeID\",\"==\" , props.challengeId);\r\n\r\n  //Querty firease for all rating then divide by count to get avg rating per chall\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea onClick={routeToChallenge}>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={imageUrl}\r\n          title=\"Challenge\"\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\">\r\n            {props.name}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardContent>\r\n        <Button size=\"small\" variant=\"outlined\" color=\"primary\" onClick={routeToChallenge}>\r\n          Play\r\n        </Button>\r\n        <Typography gutterBottom variant=\"body1\">\r\n          Created By: {challengeCreatorName}\r\n        </Typography>\r\n        <Typography gutterBottom variant=\"body1\">\r\n          Average Rating : {avgRating}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardContent>\r\n        <Rating value={0} max={5} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}