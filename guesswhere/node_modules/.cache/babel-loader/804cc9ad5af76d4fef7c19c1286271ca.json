{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Nikesh\\\\Desktop\\\\GuessWhere\\\\guesswhere\\\\src\\\\Components\\\\ChallengeCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport { useHistory } from \"react-router-dom\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport firebase from \"../firebase\";\nimport { Rating } from \"@material-ui/lab\";\nconst db = firebase.firestore();\nvar avgRating = 0.0;\nvar score = 0;\nvar totalRating = 0;\nvar cnt = 0;\nconst useStyles = makeStyles({\n  root: {\n    maxHeight: 345,\n    maxWidth: 345\n  }\n});\nexport default function ChallengeCard(props) {\n  _s();\n\n  const classes = useStyles();\n  const history = useHistory();\n  const [challengeCreatorName, setChallengeCreatorName] = useState(\"\");\n  const [imageUrl, setImageURL] = useState(\"\");\n\n  const routeToChallenge = () => {\n    //Added UID to URL path so it could be save with rating and high score\n    history.replace({\n      pathname: `/Challenge/${props.challengeId}/${props.uid}`\n    });\n  };\n\n  useEffect(() => {\n    const fetchname = async () => {\n      const userDoc = await db.collection(\"Users\").doc(props.uid).get();\n\n      if (userDoc.exists) {\n        setChallengeCreatorName(userDoc.data().name);\n      }\n    };\n\n    fetchname();\n  }, []);\n  useEffect(() => {\n    const fetchChallenge = async () => {\n      const challengedata = await db.collection(\"Challenges\").doc(props.challengeId).get();\n      const subchallenge = challengedata.data().subchallenges[0];\n      const subChallengedata = await db.collection(\"Sub-challenges\").doc(subchallenge.id).get();\n      setImageURL(subChallengedata.data().images[0]);\n    };\n\n    fetchChallenge();\n  }, []);\n  totalRating = 0;\n  cnt = 0; //Query Firebase for hi score for each chall using props.challengID in where clause to filter\n  //const data= db.collection(\"Challenge Rating\").where(\"ChallengeID\",\"==\" , props.challengeId);\n  //Querty firease for all rating then divide by count to get avg rating per chall\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(CardActionArea, {\n      onClick: routeToChallenge,\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          gutterBottom: true,\n          variant: \"h5\",\n          children: props.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        color: \"primary\",\n        onClick: routeToChallenge,\n        children: \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        gutterBottom: true,\n        variant: \"body1\",\n        children: [\"Created By: \", challengeCreatorName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        gutterBottom: true,\n        variant: \"body1\",\n        children: [\"Average Rating : \", avgRating]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Rating, {\n        value: 0,\n        max: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengeCard, \"L9zNCI364Q+uXF6QxUjLvjrHSYE=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = ChallengeCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeCard\");","map":{"version":3,"sources":["C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/src/Components/ChallengeCard.js"],"names":["React","useEffect","useState","makeStyles","Card","CardActionArea","useHistory","CardContent","Button","Typography","firebase","Rating","db","firestore","avgRating","score","totalRating","cnt","useStyles","root","maxHeight","maxWidth","ChallengeCard","props","classes","history","challengeCreatorName","setChallengeCreatorName","imageUrl","setImageURL","routeToChallenge","replace","pathname","challengeId","uid","fetchname","userDoc","collection","doc","get","exists","data","name","fetchChallenge","challengedata","subchallenge","subchallenges","subChallengedata","id","images"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport firebase from \"../firebase\";\r\nimport { Rating } from \"@material-ui/lab\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nvar avgRating = 0.0;\r\nvar score = 0;\r\nvar totalRating = 0;\r\nvar cnt = 0;\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxHeight: 345,\r\n    maxWidth: 345,\r\n  },\r\n});\r\n\r\nexport default function ChallengeCard(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [challengeCreatorName, setChallengeCreatorName] = useState(\"\");\r\n  const [imageUrl, setImageURL] = useState(\"\");\r\n  const routeToChallenge = () => {\r\n    //Added UID to URL path so it could be save with rating and high score\r\n    history.replace({\r\n      pathname: `/Challenge/${props.challengeId}/${props.uid}`,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchname = async () => {\r\n      const userDoc = await db.collection(\"Users\").doc(props.uid).get();\r\n      if (userDoc.exists) {\r\n        setChallengeCreatorName(userDoc.data().name);\r\n      }\r\n    };\r\n    fetchname();\r\n  }, []);\r\n  useEffect(() => {\r\n    const fetchChallenge = async () => {\r\n      const challengedata = await db\r\n        .collection(\"Challenges\")\r\n        .doc(props.challengeId)\r\n        .get();\r\n      const subchallenge = challengedata.data().subchallenges[0];\r\n      const subChallengedata = await db\r\n        .collection(\"Sub-challenges\")\r\n        .doc(subchallenge.id)\r\n        .get();\r\n      setImageURL(subChallengedata.data().images[0]);\r\n    };\r\n    fetchChallenge();\r\n  }, []);\r\n  totalRating = 0;\r\n  cnt = 0;\r\n  //Query Firebase for hi score for each chall using props.challengID in where clause to filter\r\n  //const data= db.collection(\"Challenge Rating\").where(\"ChallengeID\",\"==\" , props.challengeId);\r\n\r\n  //Querty firease for all rating then divide by count to get avg rating per chall\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea onClick={routeToChallenge}>\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\">\r\n            {props.name}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardContent>\r\n        <Button size=\"small\" color=\"primary\" onClick={routeToChallenge}>\r\n          Play\r\n        </Button>\r\n        <Typography gutterBottom variant=\"body1\">\r\n          Created By: {challengeCreatorName}\r\n        </Typography>\r\n        <Typography gutterBottom variant=\"body1\">\r\n          Average Rating : {avgRating}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardContent>\r\n        <Rating value={0} max={5} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}