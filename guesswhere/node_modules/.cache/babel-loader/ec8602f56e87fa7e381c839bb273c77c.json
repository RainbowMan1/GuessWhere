{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nikesh\\\\Desktop\\\\GuessWhere\\\\guesswhere\\\\src\\\\Components\\\\SubChallengeResult.js\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\nconst mapContainer = {\n  left: \"0%\",\n  height: \"65vh\",\n  width: \"100vw\"\n};\n\nconst getMidpoint = (actualMarker, guessMarker) => {\n  var lat1 = actualMarker.lat;\n  var lng1 = actualMarker.lng;\n  var lat2 = guessMarker.lat;\n  var lng2 = guessMarker.lng; //-- Convert to radians\n\n  lat1 = lat1 * (Math.PI / 180);\n  lat2 = lat2 * (Math.PI / 180);\n  lng1 = lng1 * (Math.PI / 180);\n  lng2 = lng2 * (Math.PI / 180);\n  var dLng = lng2 - lng1;\n  var bX = Math.cos(lat2) * Math.cos(dLng);\n  var bY = Math.cos(lat2) * Math.sin(dLng);\n  var lat3 = Math.atan2(Math.sin(lat1) + Math.sin(lat2), Math.sqrt((Math.cos(lat1) + bX) * (Math.cos(lat1) + bX) + bY * bY));\n  var lng3 = lng1 + Math.atan2(bY, Math.cos(lat1) + bX);\n  lat3 = lat3 * 180 / Math.PI;\n  lng3 = lng3 * 180 / Math.PI; //-- Return result\n\n  return {\n    lat: lat3,\n    lng: lng3\n  };\n};\n\nconst getDistance = (actualMarker, guessMarker) => {\n  const R = 6371e3; // metres\n\n  const φ1 = actualMarker.lat * Math.PI / 180; // φ, λ in radians\n\n  const φ2 = guessMarker.lat * Math.PI / 180;\n  const Δφ = (guessMarker.lat - actualMarker.lat) * Math.PI / 180;\n  const Δλ = (guessMarker.lng - actualMarker.lng) * Math.PI / 180;\n  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // in metres\n\n  return (d / 1000 / 1.609).toFixed(0);\n};\n\nconst lineSymbol = {\n  path: \"M 0,-1 0,1\",\n  strokeOpacity: 1,\n  scale: 4\n};\n\nconst getPoints = distance => {\n  const points = 1000 - 0.28 * distance; //1000 * ((7926 - Math.pow(distance / 10, 1.54)) / 7926);\n\n  if (points < 0) {\n    return 0;\n  }\n\n  return points.toFixed(0);\n};\n\nfunction SubChallengeResult(props) {\n  const distance = getDistance(props.Markers.actual, props.Markers.guess);\n  const center = getMidpoint(props.Markers.actual, props.Markers.guess);\n  const points = getPoints(distance);\n  const pathCoordinates = [{\n    lat: props.Markers.actual.lat,\n    lng: props.Markers.actual.lng\n  }, {\n    lat: props.Markers.guess.lat,\n    lng: props.Markers.guess.lng\n  }];\n  console.log(props.Markers.actual);\n\n  const handleContinue = () => {\n    props.onContinue(Number(points));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainer,\n      zoom: 3,\n      center: center,\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        position: props.Markers.actual,\n        icon: {\n          url: `/Images/flag.png`,\n          origin: new window.google.maps.Point(0, 0),\n          anchor: new window.google.maps.Point(15, 15),\n          scaledSize: new window.google.maps.Size(30, 30)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: props.Markers.guess,\n        icon: {\n          url: `/Images/guess.png`,\n          origin: new window.google.maps.Point(0, 0),\n          anchor: new window.google.maps.Point(15, 15),\n          scaledSize: new window.google.maps.Size(30, 30)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: center\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n        path: pathCoordinates,\n        geodesic: true,\n        options: {\n          strokeColor: \"#ff2527\",\n          strokeOpacity: 0,\n          strokeWeight: 2,\n          icons: [{\n            icon: lineSymbol,\n            offset: \"0\",\n            repeat: \"20px\"\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: [\"Your Guess was \", distance, \" miles away from the actual location. You get\", \" \", points, \"/1000 points.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleContinue,\n      children: \"Continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_c = SubChallengeResult;\nexport default SubChallengeResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubChallengeResult\");","map":{"version":3,"sources":["C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/src/Components/SubChallengeResult.js"],"names":["Button","Typography","GoogleMap","Marker","Polyline","React","mapContainer","left","height","width","getMidpoint","actualMarker","guessMarker","lat1","lat","lng1","lng","lat2","lng2","Math","PI","dLng","bX","cos","bY","sin","lat3","atan2","sqrt","lng3","getDistance","R","φ1","φ2","Δφ","Δλ","a","c","d","toFixed","lineSymbol","path","strokeOpacity","scale","getPoints","distance","points","SubChallengeResult","props","Markers","actual","guess","center","pathCoordinates","console","log","handleContinue","onContinue","Number","url","origin","window","google","maps","Point","anchor","scaledSize","Size","strokeColor","strokeWeight","icons","icon","offset","repeat"],"mappings":"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","sourcesContent":["import { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\r\nimport React from \"react\";\r\n\r\nconst mapContainer = {\r\n  left: \"0%\",\r\n  height: \"65vh\",\r\n  width: \"100vw\",\r\n};\r\n\r\nconst getMidpoint = (actualMarker, guessMarker) => {\r\n  var lat1 = actualMarker.lat;\r\n  var lng1 = actualMarker.lng;\r\n  var lat2 = guessMarker.lat;\r\n  var lng2 = guessMarker.lng;\r\n\r\n  //-- Convert to radians\r\n  lat1 = lat1 * (Math.PI / 180);\r\n  lat2 = lat2 * (Math.PI / 180);\r\n  lng1 = lng1 * (Math.PI / 180);\r\n  lng2 = lng2 * (Math.PI / 180);\r\n  var dLng = lng2 - lng1;\r\n\r\n  var bX = Math.cos(lat2) * Math.cos(dLng);\r\n  var bY = Math.cos(lat2) * Math.sin(dLng);\r\n  var lat3 = Math.atan2(\r\n    Math.sin(lat1) + Math.sin(lat2),\r\n    Math.sqrt((Math.cos(lat1) + bX) * (Math.cos(lat1) + bX) + bY * bY)\r\n  );\r\n  var lng3 = lng1 + Math.atan2(bY, Math.cos(lat1) + bX);\r\n  lat3 = (lat3 * 180) / Math.PI;\r\n  lng3 = (lng3 * 180) / Math.PI;\r\n  //-- Return result\r\n  return { lat: lat3, lng: lng3 };\r\n};\r\n\r\nconst getDistance = (actualMarker, guessMarker) => {\r\n  const R = 6371e3; // metres\r\n  const φ1 = (actualMarker.lat * Math.PI) / 180; // φ, λ in radians\r\n  const φ2 = (guessMarker.lat * Math.PI) / 180;\r\n  const Δφ = ((guessMarker.lat - actualMarker.lat) * Math.PI) / 180;\r\n  const Δλ = ((guessMarker.lng - actualMarker.lng) * Math.PI) / 180;\r\n\r\n  const a =\r\n    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  const d = R * c; // in metres\r\n  return (d / 1000 / 1.609).toFixed(0);\r\n};\r\n\r\nconst lineSymbol = {\r\n  path: \"M 0,-1 0,1\",\r\n  strokeOpacity: 1,\r\n  scale: 4,\r\n};\r\n\r\nconst getPoints = (distance) => {\r\n  const points = 1000 - 0.28 * distance; //1000 * ((7926 - Math.pow(distance / 10, 1.54)) / 7926);\r\n  if (points < 0) {\r\n    return 0;\r\n  }\r\n  return points.toFixed(0);\r\n};\r\n\r\nfunction SubChallengeResult(props) {\r\n  const distance = getDistance(props.Markers.actual, props.Markers.guess);\r\n  const center = getMidpoint(props.Markers.actual, props.Markers.guess);\r\n  const points = getPoints(distance);\r\n  const pathCoordinates = [\r\n    { lat: props.Markers.actual.lat, lng: props.Markers.actual.lng },\r\n    { lat: props.Markers.guess.lat, lng: props.Markers.guess.lng },\r\n  ];\r\n  console.log(props.Markers.actual);\r\n  const handleContinue = () => {\r\n    props.onContinue(Number(points));\r\n  };\r\n  return (\r\n    <div>\r\n      <GoogleMap mapContainerStyle={mapContainer} zoom={3} center={center}>\r\n        <Marker\r\n          position={props.Markers.actual}\r\n          icon={{\r\n            url: `/Images/flag.png`,\r\n            origin: new window.google.maps.Point(0, 0),\r\n            anchor: new window.google.maps.Point(15, 15),\r\n            scaledSize: new window.google.maps.Size(30, 30),\r\n          }}\r\n        />\r\n        <Marker\r\n          position={props.Markers.guess}\r\n          icon={{\r\n            url: `/Images/guess.png`,\r\n            origin: new window.google.maps.Point(0, 0),\r\n            anchor: new window.google.maps.Point(15, 15),\r\n            scaledSize: new window.google.maps.Size(30, 30),\r\n          }}\r\n        />\r\n        <Marker position={center} />\r\n        <Polyline\r\n          path={pathCoordinates}\r\n          geodesic={true}\r\n          options={{\r\n            strokeColor: \"#ff2527\",\r\n            strokeOpacity: 0,\r\n            strokeWeight: 2,\r\n            icons: [\r\n              {\r\n                icon: lineSymbol,\r\n                offset: \"0\",\r\n                repeat: \"20px\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </GoogleMap>\r\n      <Typography variant=\"h6\">\r\n        Your Guess was {distance} miles away from the actual location. You get{\" \"}\r\n        {points}/1000 points.\r\n      </Typography>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={handleContinue}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubChallengeResult;\r\n"]},"metadata":{},"sourceType":"module"}