{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nikesh\\\\Desktop\\\\GuessWhere\\\\guesswhere\\\\src\\\\Components\\\\ChallengeResult.js\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\nconst mapContainer = {\n  left: \"0%\",\n  height: \"65vh\",\n  width: \"100vw\"\n};\nconst center = {\n  lat: 39.693649,\n  lng: -100.548059\n};\nconst lineSymbol = {\n  path: \"M 0,-1 0,1\",\n  strokeOpacity: 1,\n  scale: 4\n};\n\nfunction ChallengeResult(props) {\n  const handleContinue = () => {};\n\n  const getPathCoordinates = total => {\n    const pathArray = [];\n    total.forEach(markers => {\n      const path = [{\n        lat: markers.actual.lat,\n        lng: markers.actual.lng\n      }, {\n        lat: markers.guess.lat,\n        lng: markers.guess.lng\n      }];\n      pathArray.push(path);\n    });\n    return pathArray;\n  };\n\n  const pathCoordinates = getPathCoordinates(props.totalMarkers);\n  console.log(pathCoordinates);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainer,\n      zoom: 3,\n      center: center,\n      children: [props.totalMarkers.map((markers, i) => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: markers.guess\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 18\n        }, this);\n      }), props.totalMarkers.map((markers, i) => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: markers.actual\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 18\n        }, this);\n      }), pathCoordinates.map((path, i) => {\n        return /*#__PURE__*/_jsxDEV(Polyline, {\n          path: path,\n          geodesic: true,\n          options: {\n            strokeColor: \"#ff2527\",\n            strokeOpacity: 0,\n            strokeWeight: 2,\n            icons: [{\n              icon: lineSymbol,\n              offset: \"0\",\n              repeat: \"20px\"\n            }]\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: [\"Your total score is \", parseFloat(props.totalPoints)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleContinue,\n      children: \"Continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ChallengeResult;\nexport default ChallengeResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeResult\");","map":{"version":3,"sources":["C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/src/Components/ChallengeResult.js"],"names":["Button","Typography","GoogleMap","Marker","Polyline","React","mapContainer","left","height","width","center","lat","lng","lineSymbol","path","strokeOpacity","scale","ChallengeResult","props","handleContinue","getPathCoordinates","total","pathArray","forEach","markers","actual","guess","push","pathCoordinates","totalMarkers","console","log","map","i","strokeColor","strokeWeight","icons","icon","offset","repeat","parseFloat","totalPoints"],"mappings":"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","sourcesContent":["import { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\r\nimport React from \"react\";\r\n\r\nconst mapContainer = {\r\n  left: \"0%\",\r\n  height: \"65vh\",\r\n  width: \"100vw\",\r\n};\r\n\r\nconst center = {\r\n  lat: 39.693649,\r\n  lng: -100.548059,\r\n};\r\n\r\nconst lineSymbol = {\r\n  path: \"M 0,-1 0,1\",\r\n  strokeOpacity: 1,\r\n  scale: 4,\r\n};\r\n\r\nfunction ChallengeResult(props) {\r\n  const handleContinue = () => {};\r\n\r\n  const getPathCoordinates = (total) => {\r\n    const pathArray = [];\r\n    total.forEach((markers) => {\r\n      const path = [\r\n        { lat: markers.actual.lat, lng: markers.actual.lng },\r\n        { lat: markers.guess.lat, lng: markers.guess.lng },\r\n      ];\r\n      pathArray.push(path);\r\n    });\r\n    return pathArray;\r\n  };\r\n  const pathCoordinates = getPathCoordinates(props.totalMarkers);\r\n\r\n  console.log(pathCoordinates);\r\n  return (\r\n    <div>\r\n      <GoogleMap mapContainerStyle={mapContainer} zoom={3} center={center}>\r\n        {props.totalMarkers.map((markers, i) => {\r\n          return <Marker key={i} position={markers.guess} />;\r\n        })}\r\n        {props.totalMarkers.map((markers, i) => {\r\n          return <Marker key={i} position={markers.actual} />;\r\n        })}\r\n        {pathCoordinates.map((path, i) => {\r\n          return (\r\n            <Polyline\r\n              key={i}\r\n              path={path}\r\n              geodesic={true}\r\n              options={{\r\n                strokeColor: \"#ff2527\",\r\n                strokeOpacity: 0,\r\n                strokeWeight: 2,\r\n                icons: [\r\n                  {\r\n                    icon: lineSymbol,\r\n                    offset: \"0\",\r\n                    repeat: \"20px\",\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </GoogleMap>\r\n      <Typography variant=\"h6\">\r\n        Your total score is {parseFloat(props.totalPoints)}\r\n      </Typography>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={handleContinue}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChallengeResult;\r\n"]},"metadata":{},"sourceType":"module"}