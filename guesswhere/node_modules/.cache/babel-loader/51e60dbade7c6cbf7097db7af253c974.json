{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/terniawilson/GuessWhere/guesswhere/src/Components/ChallengeResult.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Typography } from \"@material-ui/core\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Rating from \"material-ui-rating\";\nimport firebase from \"../firebase\";\nimport { AuthContext } from \"../AuthProvider\";\nconst db = firebase.firestore();\nconst url = new URL(window.location.href).pathname.split(\"/\");\nconst cid = url[2];\nconst uid = url[3];\n\nconst handleRating = value => {\n  alert(\"onChange \" + value);\n  alert(cid);\n  alert(uid); //Add CID and UID\n\n  db.collection(\"Challenge Rating\").add({\n    Rating: value,\n    ChallengeID: cid,\n    uid: uid\n  });\n};\n\nconst mapContainer = {\n  left: \"0%\",\n  height: \"65vh\",\n  width: \"100vw\"\n};\n\nconst getMidpoint = (actualMarker, guessMarker) => {\n  var lat1 = actualMarker.lat;\n  var lng1 = actualMarker.lng;\n  var lat2 = guessMarker.lat;\n  var lng2 = guessMarker.lng;\n  const lat3 = (lat1 + lat2) / 2;\n  const lng3 = (lng1 + lng2) / 2;\n  return {\n    lat: lat3,\n    lng: lng3\n  };\n};\n\nconst lineSymbol = {\n  path: \"M 0,-1 0,1\",\n  strokeOpacity: 1,\n  scale: 4\n};\n\nfunction ChallengeResult(props) {\n  _s();\n\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const history = useHistory();\n  const midpoints = [];\n  props.totalMarkers.forEach(element => midpoints.push(getMidpoint(element.actual, element.guess)));\n  var center = midpoints[0];\n\n  for (var i = 0; i < midpoints.length - 1; i++) {\n    center = getMidpoint(center, midpoints[i + 1]);\n  }\n\n  const handleContinue = () => {\n    history.replace({\n      pathname: `/Browse/`\n    }); //Add in challID and UID\n\n    db.collection(\"Challenge Leaderboards\").add({\n      Score: parseFloat(props.totalPoints),\n      uid: uid,\n      ChallengeID: cid\n    });\n  };\n\n  const getPathCoordinates = total => {\n    const pathArray = [];\n    total.forEach(markers => {\n      const path = [{\n        lat: markers.actual.lat,\n        lng: markers.actual.lng\n      }, {\n        lat: markers.guess.lat,\n        lng: markers.guess.lng\n      }];\n      pathArray.push(path);\n    });\n    return pathArray;\n  };\n\n  const pathCoordinates = getPathCoordinates(props.totalMarkers);\n  console.log(pathCoordinates);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainer,\n      zoom: 3,\n      center: center,\n      children: [props.totalMarkers.map((markers, i) => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: markers.guess,\n          icon: {\n            url: `/Images/guess.png`,\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15),\n            scaledSize: new window.google.maps.Size(30, 30)\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this);\n      }), props.totalMarkers.map((markers, i) => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: markers.actual,\n          icon: {\n            url: `/Images/flag.png`,\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15),\n            scaledSize: new window.google.maps.Size(30, 30)\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this);\n      }), pathCoordinates.map((path, i) => {\n        return /*#__PURE__*/_jsxDEV(Polyline, {\n          path: path,\n          geodesic: true,\n          options: {\n            strokeColor: \"#ff2527\",\n            strokeOpacity: 0,\n            strokeWeight: 2,\n            icons: [{\n              icon: lineSymbol,\n              offset: \"0\",\n              repeat: \"20px\"\n            }]\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: [\"Your total score is \", parseFloat(props.totalPoints)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Rating, {\n      value: 5,\n      max: 5,\n      onChange: handleRating\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleContinue,\n      children: \"Continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengeResult, \"jqnYSt5gxI0M4uDAztsbxfF7M7w=\", false, function () {\n  return [useHistory];\n});\n\n_c = ChallengeResult;\nexport default ChallengeResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeResult\");","map":{"version":3,"sources":["/Users/terniawilson/GuessWhere/guesswhere/src/Components/ChallengeResult.js"],"names":["Button","Typography","GoogleMap","Marker","Polyline","React","useContext","useEffect","useState","useHistory","Rating","firebase","AuthContext","db","firestore","url","URL","window","location","href","pathname","split","cid","uid","handleRating","value","alert","collection","add","ChallengeID","mapContainer","left","height","width","getMidpoint","actualMarker","guessMarker","lat1","lat","lng1","lng","lat2","lng2","lat3","lng3","lineSymbol","path","strokeOpacity","scale","ChallengeResult","props","currentUser","history","midpoints","totalMarkers","forEach","element","push","actual","guess","center","i","length","handleContinue","replace","Score","parseFloat","totalPoints","getPathCoordinates","total","pathArray","markers","pathCoordinates","console","log","map","origin","google","maps","Point","anchor","scaledSize","Size","strokeColor","strokeWeight","icons","icon","offset","repeat"],"mappings":"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","sourcesContent":["import { Button, Typography } from \"@material-ui/core\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Rating from \"material-ui-rating\";\nimport firebase from \"../firebase\";\nimport { AuthContext } from \"../AuthProvider\";\n\nconst db = firebase.firestore();\nconst url = new URL(window.location.href).pathname.split(\"/\");\nconst cid = url[2];\nconst uid = url[3];\n\nconst handleRating = (value) => {\n  alert(\"onChange \" + value);\n\n  alert(cid);\n  alert(uid);\n  //Add CID and UID\n  db.collection(\"Challenge Rating\").add({\n    Rating: value,\n    ChallengeID: cid,\n    uid: uid,\n  });\n};\n\nconst mapContainer = {\n  left: \"0%\",\n  height: \"65vh\",\n  width: \"100vw\",\n};\n\nconst getMidpoint = (actualMarker, guessMarker) => {\n  var lat1 = actualMarker.lat;\n  var lng1 = actualMarker.lng;\n  var lat2 = guessMarker.lat;\n  var lng2 = guessMarker.lng;\n  const lat3 = (lat1 + lat2) / 2;\n  const lng3 = (lng1 + lng2) / 2;\n  return { lat: lat3, lng: lng3 };\n};\n\nconst lineSymbol = {\n  path: \"M 0,-1 0,1\",\n  strokeOpacity: 1,\n  scale: 4,\n};\n\nfunction ChallengeResult(props) {\n  const { currentUser } = useContext(AuthContext);\n  const history = useHistory();\n  const midpoints = [];\n  props.totalMarkers.forEach((element) =>\n    midpoints.push(getMidpoint(element.actual, element.guess))\n  );\n  var center = midpoints[0];\n  for (var i = 0; i < midpoints.length - 1; i++) {\n    center = getMidpoint(center, midpoints[i + 1]);\n  }\n\n  const handleContinue = () => {\n    history.replace({ pathname: `/Browse/` });\n    //Add in challID and UID\n    db.collection(\"Challenge Leaderboards\").add({\n      Score: parseFloat(props.totalPoints),\n      uid: uid,\n      ChallengeID: cid,\n    });\n  };\n\n  const getPathCoordinates = (total) => {\n    const pathArray = [];\n    total.forEach((markers) => {\n      const path = [\n        { lat: markers.actual.lat, lng: markers.actual.lng },\n        { lat: markers.guess.lat, lng: markers.guess.lng },\n      ];\n      pathArray.push(path);\n    });\n    return pathArray;\n  };\n  const pathCoordinates = getPathCoordinates(props.totalMarkers);\n\n  console.log(pathCoordinates);\n  return (\n    <div>\n      <GoogleMap mapContainerStyle={mapContainer} zoom={3} center={center}>\n        {props.totalMarkers.map((markers, i) => {\n          return (\n            <Marker\n              key={i}\n              position={markers.guess}\n              icon={{\n                url: `/Images/guess.png`,\n                origin: new window.google.maps.Point(0, 0),\n                anchor: new window.google.maps.Point(15, 15),\n                scaledSize: new window.google.maps.Size(30, 30),\n              }}\n            />\n          );\n        })}\n        {props.totalMarkers.map((markers, i) => {\n          return (\n            <Marker\n              key={i}\n              position={markers.actual}\n              icon={{\n                url: `/Images/flag.png`,\n                origin: new window.google.maps.Point(0, 0),\n                anchor: new window.google.maps.Point(15, 15),\n                scaledSize: new window.google.maps.Size(30, 30),\n              }}\n            />\n          );\n        })}\n        {pathCoordinates.map((path, i) => {\n          return (\n            <Polyline\n              key={i}\n              path={path}\n              geodesic={true}\n              options={{\n                strokeColor: \"#ff2527\",\n                strokeOpacity: 0,\n                strokeWeight: 2,\n                icons: [\n                  {\n                    icon: lineSymbol,\n                    offset: \"0\",\n                    repeat: \"20px\",\n                  },\n                ],\n              }}\n            />\n          );\n        })}\n      </GoogleMap>\n      <Typography variant=\"h6\">\n        Your total score is {parseFloat(props.totalPoints)}\n      </Typography>\n      <Rating value={5} max={5} onChange={handleRating} />\n      <Button color=\"primary\" variant=\"contained\" onClick={handleContinue}>\n        Continue\n      </Button>\n    </div>\n  );\n}\n\nexport default ChallengeResult;"]},"metadata":{},"sourceType":"module"}