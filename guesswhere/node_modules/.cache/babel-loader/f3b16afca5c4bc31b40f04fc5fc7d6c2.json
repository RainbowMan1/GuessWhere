{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/terniawilson/GuessWhere/guesswhere/src/Components/SubChallengeResult.js\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\nconst mapContainer = {\n  left: \"0%\",\n  height: \"65vh\",\n  width: \"100vw\"\n};\n/* This is for actual midpoint on a curved surface like the earth\nconst getMidpoint = (actualMarker, guessMarker) => {\n  var lat1 = actualMarker.lat;\n  var lng1 = actualMarker.lng;\n  var lat2 = guessMarker.lat;\n  var lng2 = guessMarker.lng;\n\n  //-- Convert to radians\n  lat1 = lat1 * (Math.PI / 180);\n  lat2 = lat2 * (Math.PI / 180);\n  lng1 = lng1 * (Math.PI / 180);\n  lng2 = lng2 * (Math.PI / 180);\n  var dLng = lng2 - lng1;\n\n  var bX = Math.cos(lat2) * Math.cos(dLng);\n  var bY = Math.cos(lat2) * Math.sin(dLng);\n  var lat3 = Math.atan2(\n    Math.sin(lat1) + Math.sin(lat2),\n    Math.sqrt((Math.cos(lat1) + bX) * (Math.cos(lat1) + bX) + bY * bY)\n  );\n  var lng3 = lng1 + Math.atan2(bY, Math.cos(lat1) + bX);\n  lat3 = (lat3 * 180) / Math.PI;\n  lng3 = (lng3 * 180) / Math.PI;\n  //-- Return result\n  return { lat: lat3, lng: lng3 };\n};*/\n\nconst getMidpoint = (actualMarker, guessMarker) => {\n  var lat1 = actualMarker.lat;\n  var lng1 = actualMarker.lng;\n  var lat2 = guessMarker.lat;\n  var lng2 = guessMarker.lng;\n  const lat3 = (lat1 + lat2) / 2;\n  const lng3 = (lng1 + lng2) / 2;\n  return {\n    lat: lat3,\n    lng: lng3\n  };\n};\n\nconst getDistance = (actualMarker, guessMarker) => {\n  const R = 6371e3; // metres\n\n  const φ1 = actualMarker.lat * Math.PI / 180; // φ, λ in radians\n\n  const φ2 = guessMarker.lat * Math.PI / 180;\n  const Δφ = (guessMarker.lat - actualMarker.lat) * Math.PI / 180;\n  const Δλ = (guessMarker.lng - actualMarker.lng) * Math.PI / 180;\n  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // in metres\n\n  return (d / 1000 / 1.609).toFixed(0);\n};\n\nconst lineSymbol = {\n  path: \"M 0,-1 0,1\",\n  strokeOpacity: 1,\n  scale: 4\n};\n\nconst getPoints = distance => {\n  const points = 1000 - 0.28 * distance; //1000 * ((7926 - Math.pow(distance / 10, 1.54)) / 7926);\n\n  if (points < 0) {\n    return 0;\n  }\n\n  return points.toFixed(0);\n};\n\nfunction SubChallengeResult(props) {\n  const distance = getDistance(props.Markers.actual, props.Markers.guess);\n  const center = getMidpoint(props.Markers.actual, props.Markers.guess);\n  const points = getPoints(distance);\n  const pathCoordinates = [{\n    lat: props.Markers.actual.lat,\n    lng: props.Markers.actual.lng\n  }, {\n    lat: props.Markers.guess.lat,\n    lng: props.Markers.guess.lng\n  }];\n  console.log(props.Markers.actual);\n\n  const handleContinue = () => {\n    props.onContinue(Number(points));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainer,\n      zoom: 3,\n      center: center,\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        position: props.Markers.actual,\n        icon: {\n          url: `/Images/flag.png`,\n          origin: new window.google.maps.Point(0, 0),\n          anchor: new window.google.maps.Point(15, 15),\n          scaledSize: new window.google.maps.Size(30, 30)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Marker, {\n        position: props.Markers.guess,\n        icon: {\n          url: `/Images/guess.png`,\n          origin: new window.google.maps.Point(0, 0),\n          anchor: new window.google.maps.Point(15, 15),\n          scaledSize: new window.google.maps.Size(30, 30)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n        path: pathCoordinates,\n        geodesic: true,\n        options: {\n          strokeColor: \"#ff2527\",\n          strokeOpacity: 0,\n          strokeWeight: 2,\n          icons: [{\n            icon: lineSymbol,\n            offset: \"0\",\n            repeat: \"20px\"\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: [\"Your Guess was \", distance, \" miles away from the actual location. You get\", \" \", points, \"/1000 points.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleContinue,\n      children: \"Continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_c = SubChallengeResult;\nexport default SubChallengeResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubChallengeResult\");","map":{"version":3,"sources":["/Users/terniawilson/GuessWhere/guesswhere/src/Components/SubChallengeResult.js"],"names":["Button","Typography","GoogleMap","Marker","Polyline","React","mapContainer","left","height","width","getMidpoint","actualMarker","guessMarker","lat1","lat","lng1","lng","lat2","lng2","lat3","lng3","getDistance","R","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","d","toFixed","lineSymbol","path","strokeOpacity","scale","getPoints","distance","points","SubChallengeResult","props","Markers","actual","guess","center","pathCoordinates","console","log","handleContinue","onContinue","Number","url","origin","window","google","maps","Point","anchor","scaledSize","Size","strokeColor","strokeWeight","icons","icon","offset","repeat"],"mappings":"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","sourcesContent":["import { Button, Typography } from \"@material-ui/core\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\n\nconst mapContainer = {\n  left: \"0%\",\n  height: \"65vh\",\n  width: \"100vw\",\n};\n/* This is for actual midpoint on a curved surface like the earth\nconst getMidpoint = (actualMarker, guessMarker) => {\n  var lat1 = actualMarker.lat;\n  var lng1 = actualMarker.lng;\n  var lat2 = guessMarker.lat;\n  var lng2 = guessMarker.lng;\n\n  //-- Convert to radians\n  lat1 = lat1 * (Math.PI / 180);\n  lat2 = lat2 * (Math.PI / 180);\n  lng1 = lng1 * (Math.PI / 180);\n  lng2 = lng2 * (Math.PI / 180);\n  var dLng = lng2 - lng1;\n\n  var bX = Math.cos(lat2) * Math.cos(dLng);\n  var bY = Math.cos(lat2) * Math.sin(dLng);\n  var lat3 = Math.atan2(\n    Math.sin(lat1) + Math.sin(lat2),\n    Math.sqrt((Math.cos(lat1) + bX) * (Math.cos(lat1) + bX) + bY * bY)\n  );\n  var lng3 = lng1 + Math.atan2(bY, Math.cos(lat1) + bX);\n  lat3 = (lat3 * 180) / Math.PI;\n  lng3 = (lng3 * 180) / Math.PI;\n  //-- Return result\n  return { lat: lat3, lng: lng3 };\n};*/\n\nconst getMidpoint = (actualMarker, guessMarker) => {\n  var lat1 = actualMarker.lat;\n  var lng1 = actualMarker.lng;\n  var lat2 = guessMarker.lat;\n  var lng2 = guessMarker.lng;\n  const lat3 = (lat1 + lat2) / 2;\n  const lng3 = (lng1 + lng2) / 2;\n  return { lat: lat3, lng: lng3 };\n};\n\nconst getDistance = (actualMarker, guessMarker) => {\n  const R = 6371e3; // metres\n  const φ1 = (actualMarker.lat * Math.PI) / 180; // φ, λ in radians\n  const φ2 = (guessMarker.lat * Math.PI) / 180;\n  const Δφ = ((guessMarker.lat - actualMarker.lat) * Math.PI) / 180;\n  const Δλ = ((guessMarker.lng - actualMarker.lng) * Math.PI) / 180;\n\n  const a =\n    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n  const d = R * c; // in metres\n  return (d / 1000 / 1.609).toFixed(0);\n};\n\nconst lineSymbol = {\n  path: \"M 0,-1 0,1\",\n  strokeOpacity: 1,\n  scale: 4,\n};\n\nconst getPoints = (distance) => {\n  const points = 1000 - 0.28 * distance; //1000 * ((7926 - Math.pow(distance / 10, 1.54)) / 7926);\n  if (points < 0) {\n    return 0;\n  }\n  return points.toFixed(0);\n};\n\nfunction SubChallengeResult(props) {\n  const distance = getDistance(props.Markers.actual, props.Markers.guess);\n  const center = getMidpoint(props.Markers.actual, props.Markers.guess);\n  const points = getPoints(distance);\n  const pathCoordinates = [\n    { lat: props.Markers.actual.lat, lng: props.Markers.actual.lng },\n    { lat: props.Markers.guess.lat, lng: props.Markers.guess.lng },\n  ];\n  console.log(props.Markers.actual);\n  const handleContinue = () => {\n    props.onContinue(Number(points));\n  };\n  return (\n    <div>\n      <GoogleMap mapContainerStyle={mapContainer} zoom={3} center={center}>\n        <Marker\n          position={props.Markers.actual}\n          icon={{\n            url: `/Images/flag.png`,\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15),\n            scaledSize: new window.google.maps.Size(30, 30),\n          }}\n        />\n        <Marker\n          position={props.Markers.guess}\n          icon={{\n            url: `/Images/guess.png`,\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15),\n            scaledSize: new window.google.maps.Size(30, 30),\n          }}\n        />\n        <Polyline\n          path={pathCoordinates}\n          geodesic={true}\n          options={{\n            strokeColor: \"#ff2527\",\n            strokeOpacity: 0,\n            strokeWeight: 2,\n            icons: [\n              {\n                icon: lineSymbol,\n                offset: \"0\",\n                repeat: \"20px\",\n              },\n            ],\n          }}\n        />\n      </GoogleMap>\n      <Typography variant=\"h6\">\n        Your Guess was {distance} miles away from the actual location. You get{\" \"}\n        {points}/1000 points.\n      </Typography>\n      <Button color=\"primary\" variant=\"contained\" onClick={handleContinue}>\n        Continue\n      </Button>\n    </div>\n  );\n}\n\nexport default SubChallengeResult;\n"]},"metadata":{},"sourceType":"module"}