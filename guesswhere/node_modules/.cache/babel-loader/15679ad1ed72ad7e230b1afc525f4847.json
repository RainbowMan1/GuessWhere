{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nikesh\\\\Desktop\\\\GuessWhere\\\\guesswhere\\\\src\\\\Components\\\\SubChallengeResult.js\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\nconst mapContainer = {\n  position: \"absolute\",\n  left: \"0%\",\n  top: \"10%\",\n  height: \"45vh\",\n  width: \"100vw\"\n};\n\nconst getDistance = (actualMarker, guessMarker) => {\n  const R = 6371e3; // metres\n\n  const φ1 = actualMarker.lat * Math.PI / 180; // φ, λ in radians\n\n  const φ2 = guessMarker.lat * Math.PI / 180;\n  const Δφ = (guessMarker.lat - actualMarker.lat) * Math.PI / 180;\n  const Δλ = (guessMarker.lng - actualMarker.lng) * Math.PI / 180;\n  const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const d = R * c; // in metres\n\n  return d;\n};\n\nfunction SubChallengeResult(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainer,\n      zoom: 3,\n      center: center,\n      onClick: handleMapClick,\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        position: marker\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n        path: pathCoordinates,\n        geodesic: true,\n        options: {\n          strokeColor: \"#ff2527\",\n          strokeOpacity: 0.75,\n          strokeWeight: 2,\n          icons: [{\n            icon: lineSymbol,\n            offset: \"0\",\n            repeat: \"20px\"\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_c = SubChallengeResult;\nexport default SubChallengeResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"SubChallengeResult\");","map":{"version":3,"sources":["C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/src/Components/SubChallengeResult.js"],"names":["GoogleMap","Marker","Polyline","React","mapContainer","position","left","top","height","width","getDistance","actualMarker","guessMarker","R","φ1","lat","Math","PI","φ2","Δφ","Δλ","lng","a","sin","cos","c","atan2","sqrt","d","SubChallengeResult","props","center","handleMapClick","marker","pathCoordinates","strokeColor","strokeOpacity","strokeWeight","icons","icon","lineSymbol","offset","repeat"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,wBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,UADS;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,GAAG,EAAE,KAHc;AAInBC,EAAAA,MAAM,EAAE,MAJW;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,YAAD,EAAeC,WAAf,KAA+B;AACjD,QAAMC,CAAC,GAAG,MAAV,CADiD,CAC/B;;AAClB,QAAMC,EAAE,GAAIH,YAAY,CAACI,GAAb,GAAmBC,IAAI,CAACC,EAAzB,GAA+B,GAA1C,CAFiD,CAEF;;AAC/C,QAAMC,EAAE,GAAIN,WAAW,CAACG,GAAZ,GAAkBC,IAAI,CAACC,EAAxB,GAA8B,GAAzC;AACA,QAAME,EAAE,GAAI,CAACP,WAAW,CAACG,GAAZ,GAAkBJ,YAAY,CAACI,GAAhC,IAAuCC,IAAI,CAACC,EAA7C,GAAmD,GAA9D;AACA,QAAMG,EAAE,GAAI,CAACR,WAAW,CAACS,GAAZ,GAAkBV,YAAY,CAACU,GAAhC,IAAuCL,IAAI,CAACC,EAA7C,GAAmD,GAA9D;AAEA,QAAMK,CAAC,GACLN,IAAI,CAACO,GAAL,CAASJ,EAAE,GAAG,CAAd,IAAmBH,IAAI,CAACO,GAAL,CAASJ,EAAE,GAAG,CAAd,CAAnB,GACAH,IAAI,CAACQ,GAAL,CAASV,EAAT,IAAeE,IAAI,CAACQ,GAAL,CAASN,EAAT,CAAf,GAA8BF,IAAI,CAACO,GAAL,CAASH,EAAE,GAAG,CAAd,CAA9B,GAAiDJ,IAAI,CAACO,GAAL,CAASH,EAAE,GAAG,CAAd,CAFnD;AAGA,QAAMK,CAAC,GAAG,IAAIT,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACW,IAAL,CAAUL,CAAV,CAAX,EAAyBN,IAAI,CAACW,IAAL,CAAU,IAAIL,CAAd,CAAzB,CAAd;AAEA,QAAMM,CAAC,GAAGf,CAAC,GAAGY,CAAd,CAZiD,CAYhC;;AACjB,SAAOG,CAAP;AACD,CAdD;;AAgBA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,sBACE;AAAA,2BACE,QAAC,SAAD;AACE,MAAA,iBAAiB,EAAE1B,YADrB;AAEE,MAAA,IAAI,EAAE,CAFR;AAGE,MAAA,MAAM,EAAE2B,MAHV;AAIE,MAAA,OAAO,EAAEC,cAJX;AAAA,8BAME,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEC;AAAlB;AAAA;AAAA;AAAA;AAAA,cANF,eAOE,QAAC,QAAD;AACE,QAAA,IAAI,EAAEC,eADR;AAEE,QAAA,QAAQ,EAAE,IAFZ;AAGE,QAAA,OAAO,EAAE;AACPC,UAAAA,WAAW,EAAE,SADN;AAEPC,UAAAA,aAAa,EAAE,IAFR;AAGPC,UAAAA,YAAY,EAAE,CAHP;AAIPC,UAAAA,KAAK,EAAE,CACL;AACEC,YAAAA,IAAI,EAAEC,UADR;AAEEC,YAAAA,MAAM,EAAE,GAFV;AAGEC,YAAAA,MAAM,EAAE;AAHV,WADK;AAJA;AAHX;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;KA7BQb,kB;AA+BT,eAAeA,kBAAf","sourcesContent":["import { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\r\nimport React from \"react\";\r\n\r\nconst mapContainer = {\r\n  position: \"absolute\",\r\n  left: \"0%\",\r\n  top: \"10%\",\r\n  height: \"45vh\",\r\n  width: \"100vw\",\r\n};\r\n\r\nconst getDistance = (actualMarker, guessMarker) => {\r\n  const R = 6371e3; // metres\r\n  const φ1 = (actualMarker.lat * Math.PI) / 180; // φ, λ in radians\r\n  const φ2 = (guessMarker.lat * Math.PI) / 180;\r\n  const Δφ = ((guessMarker.lat - actualMarker.lat) * Math.PI) / 180;\r\n  const Δλ = ((guessMarker.lng - actualMarker.lng) * Math.PI) / 180;\r\n\r\n  const a =\r\n    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  const d = R * c; // in metres\r\n  return d;\r\n};\r\n\r\nfunction SubChallengeResult(props) {\r\n  return (\r\n    <div>\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainer}\r\n        zoom={3}\r\n        center={center}\r\n        onClick={handleMapClick}\r\n      >\r\n        <Marker position={marker} />\r\n        <Polyline\r\n          path={pathCoordinates}\r\n          geodesic={true}\r\n          options={{\r\n            strokeColor: \"#ff2527\",\r\n            strokeOpacity: 0.75,\r\n            strokeWeight: 2,\r\n            icons: [\r\n              {\r\n                icon: lineSymbol,\r\n                offset: \"0\",\r\n                repeat: \"20px\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </GoogleMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubChallengeResult;\r\n"]},"metadata":{},"sourceType":"module"}