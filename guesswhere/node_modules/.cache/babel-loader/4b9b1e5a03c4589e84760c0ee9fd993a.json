{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Button,Typography}from\"@material-ui/core\";import{GoogleMap,Marker,Polyline}from\"@react-google-maps/api\";import React from\"react\";var mapContainer={left:\"0%\",height:\"65vh\",width:\"100vw\"};/* This is for actual midpoint on a curved surface like the earth\r\nconst getMidpoint = (actualMarker, guessMarker) => {\r\n  var lat1 = actualMarker.lat;\r\n  var lng1 = actualMarker.lng;\r\n  var lat2 = guessMarker.lat;\r\n  var lng2 = guessMarker.lng;\r\n\r\n  //-- Convert to radians\r\n  lat1 = lat1 * (Math.PI / 180);\r\n  lat2 = lat2 * (Math.PI / 180);\r\n  lng1 = lng1 * (Math.PI / 180);\r\n  lng2 = lng2 * (Math.PI / 180);\r\n  var dLng = lng2 - lng1;\r\n\r\n  var bX = Math.cos(lat2) * Math.cos(dLng);\r\n  var bY = Math.cos(lat2) * Math.sin(dLng);\r\n  var lat3 = Math.atan2(\r\n    Math.sin(lat1) + Math.sin(lat2),\r\n    Math.sqrt((Math.cos(lat1) + bX) * (Math.cos(lat1) + bX) + bY * bY)\r\n  );\r\n  var lng3 = lng1 + Math.atan2(bY, Math.cos(lat1) + bX);\r\n  lat3 = (lat3 * 180) / Math.PI;\r\n  lng3 = (lng3 * 180) / Math.PI;\r\n  //-- Return result\r\n  return { lat: lat3, lng: lng3 };\r\n};*/var getMidpoint=function getMidpoint(actualMarker,guessMarker){var lat1=actualMarker.lat;var lng1=actualMarker.lng;var lat2=guessMarker.lat;var lng2=guessMarker.lng;var lat3=(lat1+lat2)/2;var lng3=(lng1+lng2)/2;return{lat:lat3,lng:lng3};};var getDistance=function getDistance(actualMarker,guessMarker){var R=6371e3;// metres\nvar φ1=actualMarker.lat*Math.PI/180;// φ, λ in radians\nvar φ2=guessMarker.lat*Math.PI/180;var Δφ=(guessMarker.lat-actualMarker.lat)*Math.PI/180;var Δλ=(guessMarker.lng-actualMarker.lng)*Math.PI/180;var a=Math.sin(Δφ/2)*Math.sin(Δφ/2)+Math.cos(φ1)*Math.cos(φ2)*Math.sin(Δλ/2)*Math.sin(Δλ/2);var c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));var d=R*c;// in metres\nreturn(d/1000/1.609).toFixed(0);};var lineSymbol={path:\"M 0,-1 0,1\",strokeOpacity:1,scale:4};var getPoints=function getPoints(distance){var points=1000-0.28*distance;//1000 * ((7926 - Math.pow(distance / 10, 1.54)) / 7926);\nif(points<0){return 0;}return points.toFixed(0);};function SubChallengeResult(props){var distance=getDistance(props.Markers.actual,props.Markers.guess);var center=getMidpoint(props.Markers.actual,props.Markers.guess);var points=getPoints(distance);var pathCoordinates=[{lat:props.Markers.actual.lat,lng:props.Markers.actual.lng},{lat:props.Markers.guess.lat,lng:props.Markers.guess.lng}];console.log(props.Markers.actual);var handleContinue=function handleContinue(){props.onContinue(Number(points));};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{style:{fontSize:\"30px\",textAlign:\"center\"},children:\"Challenge Results\"}),/*#__PURE__*/_jsxs(GoogleMap,{mapContainerStyle:mapContainer,zoom:3,center:center,children:[/*#__PURE__*/_jsx(Marker,{position:props.Markers.actual,icon:{url:\"/Images/flag.png\",origin:new window.google.maps.Point(0,0),anchor:new window.google.maps.Point(15,15),scaledSize:new window.google.maps.Size(30,30)}}),/*#__PURE__*/_jsx(Marker,{position:props.Markers.guess,icon:{url:\"/Images/guess.png\",origin:new window.google.maps.Point(0,0),anchor:new window.google.maps.Point(15,15),scaledSize:new window.google.maps.Size(30,30)}}),/*#__PURE__*/_jsx(Polyline,{path:pathCoordinates,geodesic:true,options:{strokeColor:\"#ff2527\",strokeOpacity:0,strokeWeight:2,icons:[{icon:lineSymbol,offset:\"0\",repeat:\"20px\"}]}})]}),/*#__PURE__*/_jsxs(\"div\",{style:{align:\"center\",width:\"auto\",border:\"5px dotted black\",padding:\"20px\",marginLeft:\"auto\",marginRight:\"auto\",textAlign:\"center\"},children:[/*#__PURE__*/_jsxs(Typography,{variant:\"h6\",children:[\"Your Guess was \",distance,\" miles away from the actual location. You get\",\" \",points,\"/1000 points.\"]}),/*#__PURE__*/_jsx(Button,{color:\"primary\",variant:\"contained\",onClick:handleContinue,children:\"Continue\"})]})]});}export default SubChallengeResult;","map":{"version":3,"sources":["C:/Users/Nikesh/Desktop/GuessWhere/guesswhere/src/Components/SubChallengeResult.js"],"names":["Button","Typography","GoogleMap","Marker","Polyline","React","mapContainer","left","height","width","getMidpoint","actualMarker","guessMarker","lat1","lat","lng1","lng","lat2","lng2","lat3","lng3","getDistance","R","φ1","Math","PI","φ2","Δφ","Δλ","a","sin","cos","c","atan2","sqrt","d","toFixed","lineSymbol","path","strokeOpacity","scale","getPoints","distance","points","SubChallengeResult","props","Markers","actual","guess","center","pathCoordinates","console","log","handleContinue","onContinue","Number","fontSize","textAlign","url","origin","window","google","maps","Point","anchor","scaledSize","Size","strokeColor","strokeWeight","icons","icon","offset","repeat","align","border","padding","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\r\nimport React from \"react\";\r\n\r\nconst mapContainer = {\r\n  left: \"0%\",\r\n  height: \"65vh\",\r\n  width: \"100vw\",\r\n};\r\n/* This is for actual midpoint on a curved surface like the earth\r\nconst getMidpoint = (actualMarker, guessMarker) => {\r\n  var lat1 = actualMarker.lat;\r\n  var lng1 = actualMarker.lng;\r\n  var lat2 = guessMarker.lat;\r\n  var lng2 = guessMarker.lng;\r\n\r\n  //-- Convert to radians\r\n  lat1 = lat1 * (Math.PI / 180);\r\n  lat2 = lat2 * (Math.PI / 180);\r\n  lng1 = lng1 * (Math.PI / 180);\r\n  lng2 = lng2 * (Math.PI / 180);\r\n  var dLng = lng2 - lng1;\r\n\r\n  var bX = Math.cos(lat2) * Math.cos(dLng);\r\n  var bY = Math.cos(lat2) * Math.sin(dLng);\r\n  var lat3 = Math.atan2(\r\n    Math.sin(lat1) + Math.sin(lat2),\r\n    Math.sqrt((Math.cos(lat1) + bX) * (Math.cos(lat1) + bX) + bY * bY)\r\n  );\r\n  var lng3 = lng1 + Math.atan2(bY, Math.cos(lat1) + bX);\r\n  lat3 = (lat3 * 180) / Math.PI;\r\n  lng3 = (lng3 * 180) / Math.PI;\r\n  //-- Return result\r\n  return { lat: lat3, lng: lng3 };\r\n};*/\r\n\r\nconst getMidpoint = (actualMarker, guessMarker) => {\r\n  var lat1 = actualMarker.lat;\r\n  var lng1 = actualMarker.lng;\r\n  var lat2 = guessMarker.lat;\r\n  var lng2 = guessMarker.lng;\r\n  const lat3 = (lat1 + lat2) / 2;\r\n  const lng3 = (lng1 + lng2) / 2;\r\n  return { lat: lat3, lng: lng3 };\r\n};\r\n\r\nconst getDistance = (actualMarker, guessMarker) => {\r\n  const R = 6371e3; // metres\r\n  const φ1 = (actualMarker.lat * Math.PI) / 180; // φ, λ in radians\r\n  const φ2 = (guessMarker.lat * Math.PI) / 180;\r\n  const Δφ = ((guessMarker.lat - actualMarker.lat) * Math.PI) / 180;\r\n  const Δλ = ((guessMarker.lng - actualMarker.lng) * Math.PI) / 180;\r\n\r\n  const a =\r\n    Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +\r\n    Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  const d = R * c; // in metres\r\n  return (d / 1000 / 1.609).toFixed(0);\r\n};\r\n\r\nconst lineSymbol = {\r\n  path: \"M 0,-1 0,1\",\r\n  strokeOpacity: 1,\r\n  scale: 4,\r\n};\r\n\r\nconst getPoints = (distance) => {\r\n  const points = 1000 - 0.28 * distance; //1000 * ((7926 - Math.pow(distance / 10, 1.54)) / 7926);\r\n  if (points < 0) {\r\n    return 0;\r\n  }\r\n  return points.toFixed(0);\r\n};\r\n\r\nfunction SubChallengeResult(props) {\r\n  const distance = getDistance(props.Markers.actual, props.Markers.guess);\r\n  const center = getMidpoint(props.Markers.actual, props.Markers.guess);\r\n  const points = getPoints(distance);\r\n  const pathCoordinates = [\r\n    { lat: props.Markers.actual.lat, lng: props.Markers.actual.lng },\r\n    { lat: props.Markers.guess.lat, lng: props.Markers.guess.lng },\r\n  ];\r\n  console.log(props.Markers.actual);\r\n  const handleContinue = () => {\r\n    props.onContinue(Number(points));\r\n  };\r\n  return (\r\n    <div>\r\n      <h1 style={{fontSize: \"30px\", textAlign: \"center\"}} >Challenge Results</h1>\r\n      <GoogleMap mapContainerStyle={mapContainer} zoom={3} center={center}>\r\n        <Marker\r\n          position={props.Markers.actual}\r\n          icon={{\r\n            url: `/Images/flag.png`,\r\n            origin: new window.google.maps.Point(0, 0),\r\n            anchor: new window.google.maps.Point(15, 15),\r\n            scaledSize: new window.google.maps.Size(30, 30),\r\n          }}\r\n        />\r\n        <Marker\r\n          position={props.Markers.guess}\r\n          icon={{\r\n            url: `/Images/guess.png`,\r\n            origin: new window.google.maps.Point(0, 0),\r\n            anchor: new window.google.maps.Point(15, 15),\r\n            scaledSize: new window.google.maps.Size(30, 30),\r\n          }}\r\n        />\r\n        <Polyline\r\n          path={pathCoordinates}\r\n          geodesic={true}\r\n          options={{\r\n            strokeColor: \"#ff2527\",\r\n            strokeOpacity: 0,\r\n            strokeWeight: 2,\r\n            icons: [\r\n              {\r\n                icon: lineSymbol,\r\n                offset: \"0\",\r\n                repeat: \"20px\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </GoogleMap>\r\n\r\n      <div\r\n      style={{\r\n        align: \"center\",\r\n        width: \"auto\",\r\n        border: \"5px dotted black\",\r\n        padding: \"20px\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n        textAlign: \"center\",}}\r\n      >\r\n      <Typography variant=\"h6\">\r\n        Your Guess was {distance} miles away from the actual location. You get{\" \"}\r\n        {points}/1000 points.\r\n      </Typography>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={handleContinue}>\r\n        Continue\r\n      </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SubChallengeResult;\r\n"]},"metadata":{},"sourceType":"module"}