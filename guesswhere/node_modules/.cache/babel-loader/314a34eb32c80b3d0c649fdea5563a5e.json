{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\majorf\\\\GuessWhere\\\\guesswhere\\\\src\\\\Components\\\\ChallengeResult.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Typography } from \"@material-ui/core\";\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\nimport React from \"react\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Rating from 'material-ui-rating';\nimport firebase from \"../firebase\";\nimport { AuthContext } from \"../AuthProvider\";\nconst db = firebase.firestore();\n\nconst handleRating = value => {\n  alert('onChange ' + value); //Add ChallID and UID\n\n  db.collection('Challenge Rating').add({\n    Rating: value\n  });\n};\n\nconst mapContainer = {\n  left: \"0%\",\n  height: \"65vh\",\n  width: \"100vw\"\n};\n\nconst getMidpoint = (actualMarker, guessMarker) => {\n  var lat1 = actualMarker.lat;\n  var lng1 = actualMarker.lng;\n  var lat2 = guessMarker.lat;\n  var lng2 = guessMarker.lng;\n  const lat3 = (lat1 + lat2) / 2;\n  const lng3 = (lng1 + lng2) / 2;\n  return {\n    lat: lat3,\n    lng: lng3\n  };\n};\n\nconst lineSymbol = {\n  path: \"M 0,-1 0,1\",\n  strokeOpacity: 1,\n  scale: 4\n};\n\nfunction ChallengeResult(props) {\n  _s();\n\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const history = useHistory();\n  const midpoints = [];\n  props.totalMarkers.forEach(element => midpoints.push(getMidpoint(element.actual, element.guess)));\n  var center = midpoints[0];\n\n  for (var i = 0; i < midpoints.length - 1; i++) {\n    center = getMidpoint(center, midpoints[i + 1]);\n  }\n\n  const handleContinue = () => {\n    history.replace({\n      pathname: `/Browse/`\n    }); //Add in challID and UID \n\n    db.collection('Challenge Leaderboards').add({\n      Score: parseFloat(props.totalPoints)\n    });\n  };\n\n  const getPathCoordinates = total => {\n    const pathArray = [];\n    total.forEach(markers => {\n      const path = [{\n        lat: markers.actual.lat,\n        lng: markers.actual.lng\n      }, {\n        lat: markers.guess.lat,\n        lng: markers.guess.lng\n      }];\n      pathArray.push(path);\n    });\n    return pathArray;\n  };\n\n  const pathCoordinates = getPathCoordinates(props.totalMarkers);\n  console.log(pathCoordinates);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainer,\n      zoom: 3,\n      center: center,\n      children: [props.totalMarkers.map((markers, i) => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: markers.guess,\n          icon: {\n            url: `/Images/guess.png`,\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15),\n            scaledSize: new window.google.maps.Size(30, 30)\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this);\n      }), props.totalMarkers.map((markers, i) => {\n        return /*#__PURE__*/_jsxDEV(Marker, {\n          position: markers.actual,\n          icon: {\n            url: `/Images/flag.png`,\n            origin: new window.google.maps.Point(0, 0),\n            anchor: new window.google.maps.Point(15, 15),\n            scaledSize: new window.google.maps.Size(30, 30)\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this);\n      }), pathCoordinates.map((path, i) => {\n        return /*#__PURE__*/_jsxDEV(Polyline, {\n          path: path,\n          geodesic: true,\n          options: {\n            strokeColor: \"#ff2527\",\n            strokeOpacity: 0,\n            strokeWeight: 2,\n            icons: [{\n              icon: lineSymbol,\n              offset: \"0\",\n              repeat: \"20px\"\n            }]\n          }\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: [\"Your total score is \", parseFloat(props.totalPoints)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Rating, {\n      value: 5,\n      max: 5,\n      onChange: handleRating\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: handleContinue,\n      children: \"Continue\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChallengeResult, \"jqnYSt5gxI0M4uDAztsbxfF7M7w=\", false, function () {\n  return [useHistory];\n});\n\n_c = ChallengeResult;\nexport default ChallengeResult;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengeResult\");","map":{"version":3,"sources":["C:/Users/majorf/GuessWhere/guesswhere/src/Components/ChallengeResult.js"],"names":["Button","Typography","GoogleMap","Marker","Polyline","React","useContext","useEffect","useState","useHistory","Rating","firebase","AuthContext","db","firestore","handleRating","value","alert","collection","add","mapContainer","left","height","width","getMidpoint","actualMarker","guessMarker","lat1","lat","lng1","lng","lat2","lng2","lat3","lng3","lineSymbol","path","strokeOpacity","scale","ChallengeResult","props","currentUser","history","midpoints","totalMarkers","forEach","element","push","actual","guess","center","i","length","handleContinue","replace","pathname","Score","parseFloat","totalPoints","getPathCoordinates","total","pathArray","markers","pathCoordinates","console","log","map","url","origin","window","google","maps","Point","anchor","scaledSize","Size","strokeColor","strokeWeight","icons","icon","offset","repeat"],"mappings":";;;;;AAAA,SAASA,MAAT,EAAiBC,UAAjB,QAAmC,mBAAnC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,wBAA5C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,MAAMC,EAAE,GAAGF,QAAQ,CAACG,SAAT,EAAX;;AAEA,MAAMC,YAAY,GAAGC,KAAD,IAAU;AAC5BC,EAAAA,KAAK,CAAC,cAAcD,KAAf,CAAL,CAD4B,CAG5B;;AACAH,EAAAA,EAAE,CAACK,UAAH,CAAc,kBAAd,EAAkCC,GAAlC,CAAsC;AAACT,IAAAA,MAAM,EAAEM;AAAT,GAAtC;AACD,CALD;;AAOA,MAAMI,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,MAAM,EAAE,MAFW;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,YAAD,EAAeC,WAAf,KAA+B;AACjD,MAAIC,IAAI,GAAGF,YAAY,CAACG,GAAxB;AACA,MAAIC,IAAI,GAAGJ,YAAY,CAACK,GAAxB;AACA,MAAIC,IAAI,GAAGL,WAAW,CAACE,GAAvB;AACA,MAAII,IAAI,GAAGN,WAAW,CAACI,GAAvB;AACA,QAAMG,IAAI,GAAG,CAACN,IAAI,GAAGI,IAAR,IAAgB,CAA7B;AACA,QAAMG,IAAI,GAAG,CAACL,IAAI,GAAGG,IAAR,IAAgB,CAA7B;AACA,SAAO;AAAEJ,IAAAA,GAAG,EAAEK,IAAP;AAAaH,IAAAA,GAAG,EAAEI;AAAlB,GAAP;AACD,CARD;;AAUA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAE,YADW;AAEjBC,EAAAA,aAAa,EAAE,CAFE;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAAnB;;AAMA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAkBnC,UAAU,CAACM,WAAD,CAAlC;AACA,QAAM8B,OAAO,GAAGjC,UAAU,EAA1B;AACA,QAAMkC,SAAS,GAAG,EAAlB;AACAH,EAAAA,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA4BC,OAAD,IACzBH,SAAS,CAACI,IAAV,CAAevB,WAAW,CAACsB,OAAO,CAACE,MAAT,EAAiBF,OAAO,CAACG,KAAzB,CAA1B,CADF;AAGA,MAAIC,MAAM,GAAGP,SAAS,CAAC,CAAD,CAAtB;;AACA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,SAAS,CAACS,MAAV,GAAmB,CAAvC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7CD,IAAAA,MAAM,GAAG1B,WAAW,CAAC0B,MAAD,EAASP,SAAS,CAACQ,CAAC,GAAG,CAAL,CAAlB,CAApB;AACD;;AAED,QAAME,cAAc,GAAG,MAAM;AAC3BX,IAAAA,OAAO,CAACY,OAAR,CAAgB;AAAEC,MAAAA,QAAQ,EAAG;AAAb,KAAhB,EAD2B,CAE3B;;AACA1C,IAAAA,EAAE,CAACK,UAAH,CAAc,wBAAd,EAAwCC,GAAxC,CAA4C;AAACqC,MAAAA,KAAK,EAAEC,UAAU,CAACjB,KAAK,CAACkB,WAAP;AAAlB,KAA5C;AACD,GAJD;;AAMA,QAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC,UAAMC,SAAS,GAAG,EAAlB;AACAD,IAAAA,KAAK,CAACf,OAAN,CAAeiB,OAAD,IAAa;AACzB,YAAM1B,IAAI,GAAG,CACX;AAAER,QAAAA,GAAG,EAAEkC,OAAO,CAACd,MAAR,CAAepB,GAAtB;AAA2BE,QAAAA,GAAG,EAAEgC,OAAO,CAACd,MAAR,CAAelB;AAA/C,OADW,EAEX;AAAEF,QAAAA,GAAG,EAAEkC,OAAO,CAACb,KAAR,CAAcrB,GAArB;AAA0BE,QAAAA,GAAG,EAAEgC,OAAO,CAACb,KAAR,CAAcnB;AAA7C,OAFW,CAAb;AAIA+B,MAAAA,SAAS,CAACd,IAAV,CAAeX,IAAf;AACD,KAND;AAOA,WAAOyB,SAAP;AACD,GAVD;;AAWA,QAAME,eAAe,GAAGJ,kBAAkB,CAACnB,KAAK,CAACI,YAAP,CAA1C;AAEAoB,EAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AACA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,iBAAiB,EAAE3C,YAA9B;AAA4C,MAAA,IAAI,EAAE,CAAlD;AAAqD,MAAA,MAAM,EAAE8B,MAA7D;AAAA,iBACGV,KAAK,CAACI,YAAN,CAAmBsB,GAAnB,CAAuB,CAACJ,OAAD,EAAUX,CAAV,KAAgB;AACtC,4BACE,QAAC,MAAD;AAEE,UAAA,QAAQ,EAAEW,OAAO,CAACb,KAFpB;AAGE,UAAA,IAAI,EAAE;AACJkB,YAAAA,GAAG,EAAG,mBADF;AAEJC,YAAAA,MAAM,EAAE,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,CAFJ;AAGJC,YAAAA,MAAM,EAAE,IAAIJ,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,KAAvB,CAA6B,EAA7B,EAAiC,EAAjC,CAHJ;AAIJE,YAAAA,UAAU,EAAE,IAAIL,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBI,IAAvB,CAA4B,EAA5B,EAAgC,EAAhC;AAJR;AAHR,WACOxB,CADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAYD,OAbA,CADH,EAeGX,KAAK,CAACI,YAAN,CAAmBsB,GAAnB,CAAuB,CAACJ,OAAD,EAAUX,CAAV,KAAgB;AACtC,4BACE,QAAC,MAAD;AAEE,UAAA,QAAQ,EAAEW,OAAO,CAACd,MAFpB;AAGE,UAAA,IAAI,EAAE;AACJmB,YAAAA,GAAG,EAAG,kBADF;AAEJC,YAAAA,MAAM,EAAE,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,CAFJ;AAGJC,YAAAA,MAAM,EAAE,IAAIJ,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,KAAvB,CAA6B,EAA7B,EAAiC,EAAjC,CAHJ;AAIJE,YAAAA,UAAU,EAAE,IAAIL,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBI,IAAvB,CAA4B,EAA5B,EAAgC,EAAhC;AAJR;AAHR,WACOxB,CADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAYD,OAbA,CAfH,EA6BGY,eAAe,CAACG,GAAhB,CAAoB,CAAC9B,IAAD,EAAOe,CAAP,KAAa;AAChC,4BACE,QAAC,QAAD;AAEE,UAAA,IAAI,EAAEf,IAFR;AAGE,UAAA,QAAQ,EAAE,IAHZ;AAIE,UAAA,OAAO,EAAE;AACPwC,YAAAA,WAAW,EAAE,SADN;AAEPvC,YAAAA,aAAa,EAAE,CAFR;AAGPwC,YAAAA,YAAY,EAAE,CAHP;AAIPC,YAAAA,KAAK,EAAE,CACL;AACEC,cAAAA,IAAI,EAAE5C,UADR;AAEE6C,cAAAA,MAAM,EAAE,GAFV;AAGEC,cAAAA,MAAM,EAAE;AAHV,aADK;AAJA;AAJX,WACO9B,CADP;AAAA;AAAA;AAAA;AAAA,gBADF;AAmBD,OApBA,CA7BH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAoDE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAA,yCACuBM,UAAU,CAACjB,KAAK,CAACkB,WAAP,CADjC;AAAA;AAAA;AAAA;AAAA;AAAA,YApDF,eAuDE,QAAC,MAAD;AACA,MAAA,KAAK,EAAE,CADP;AAEA,MAAA,GAAG,EAAE,CAFL;AAGA,MAAA,QAAQ,EAAE3C;AAHV;AAAA;AAAA;AAAA;AAAA,YAvDF,eA4DE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAC,WAAhC;AAA4C,MAAA,OAAO,EAAEsC,cAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA5DF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkED;;GAlGQd,e;UAES9B,U;;;KAFT8B,e;AAoGT,eAAeA,eAAf","sourcesContent":["import { Button, Typography } from \"@material-ui/core\";\r\nimport { GoogleMap, Marker, Polyline } from \"@react-google-maps/api\";\r\nimport React from \"react\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Rating from 'material-ui-rating';\r\nimport firebase from \"../firebase\";\r\nimport { AuthContext } from \"../AuthProvider\";\r\n\r\nconst db = firebase.firestore();\r\n\r\nconst handleRating =(value) =>{\r\n  alert('onChange ' + value);\r\n\r\n  //Add ChallID and UID\r\n  db.collection('Challenge Rating').add({Rating: value});\r\n};\r\n\r\nconst mapContainer = {\r\n  left: \"0%\",\r\n  height: \"65vh\",\r\n  width: \"100vw\",\r\n};\r\n\r\n\r\n\r\nconst getMidpoint = (actualMarker, guessMarker) => {\r\n  var lat1 = actualMarker.lat;\r\n  var lng1 = actualMarker.lng;\r\n  var lat2 = guessMarker.lat;\r\n  var lng2 = guessMarker.lng;\r\n  const lat3 = (lat1 + lat2) / 2;\r\n  const lng3 = (lng1 + lng2) / 2;\r\n  return { lat: lat3, lng: lng3 };\r\n};\r\n\r\nconst lineSymbol = {\r\n  path: \"M 0,-1 0,1\",\r\n  strokeOpacity: 1,\r\n  scale: 4,\r\n};\r\n\r\nfunction ChallengeResult(props) {\r\n  const { currentUser } = useContext(AuthContext);\r\n  const history = useHistory();\r\n  const midpoints = [];\r\n  props.totalMarkers.forEach((element) =>\r\n    midpoints.push(getMidpoint(element.actual, element.guess))\r\n  );\r\n  var center = midpoints[0];\r\n  for (var i = 0; i < midpoints.length - 1; i++) {\r\n    center = getMidpoint(center, midpoints[i + 1]);\r\n  }\r\n\r\n  const handleContinue = () => {\r\n    history.replace({ pathname: `/Browse/` });\r\n    //Add in challID and UID \r\n    db.collection('Challenge Leaderboards').add({Score: parseFloat(props.totalPoints)});\r\n  };\r\n\r\n  const getPathCoordinates = (total) => {\r\n    const pathArray = [];\r\n    total.forEach((markers) => {\r\n      const path = [\r\n        { lat: markers.actual.lat, lng: markers.actual.lng },\r\n        { lat: markers.guess.lat, lng: markers.guess.lng },\r\n      ];\r\n      pathArray.push(path);\r\n    });\r\n    return pathArray;\r\n  };\r\n  const pathCoordinates = getPathCoordinates(props.totalMarkers);\r\n\r\n  console.log(pathCoordinates);\r\n  return (\r\n    <div>\r\n      <GoogleMap mapContainerStyle={mapContainer} zoom={3} center={center}>\r\n        {props.totalMarkers.map((markers, i) => {\r\n          return (\r\n            <Marker\r\n              key={i}\r\n              position={markers.guess}\r\n              icon={{\r\n                url: `/Images/guess.png`,\r\n                origin: new window.google.maps.Point(0, 0),\r\n                anchor: new window.google.maps.Point(15, 15),\r\n                scaledSize: new window.google.maps.Size(30, 30),\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n        {props.totalMarkers.map((markers, i) => {\r\n          return (\r\n            <Marker\r\n              key={i}\r\n              position={markers.actual}\r\n              icon={{\r\n                url: `/Images/flag.png`,\r\n                origin: new window.google.maps.Point(0, 0),\r\n                anchor: new window.google.maps.Point(15, 15),\r\n                scaledSize: new window.google.maps.Size(30, 30),\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n        {pathCoordinates.map((path, i) => {\r\n          return (\r\n            <Polyline\r\n              key={i}\r\n              path={path}\r\n              geodesic={true}\r\n              options={{\r\n                strokeColor: \"#ff2527\",\r\n                strokeOpacity: 0,\r\n                strokeWeight: 2,\r\n                icons: [\r\n                  {\r\n                    icon: lineSymbol,\r\n                    offset: \"0\",\r\n                    repeat: \"20px\",\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </GoogleMap>\r\n      <Typography variant=\"h6\">\r\n        Your total score is {parseFloat(props.totalPoints)}\r\n      </Typography>\r\n      <Rating\r\n      value={5}\r\n      max={5}\r\n      onChange={handleRating}\r\n    />\r\n      <Button color=\"primary\" variant=\"contained\" onClick={handleContinue}>\r\n        Continue\r\n      </Button>\r\n    </div>  \r\n  );\r\n}\r\n\r\nexport default ChallengeResult;\r\n"]},"metadata":{},"sourceType":"module"}